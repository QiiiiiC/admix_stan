// Code generated by stanc v2.33.1
#include <stan/model/model_header.hpp>
namespace simple_admixture_naive_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 106> locations_array__ =
  {" (found before start of program)",
  " (in 'simple_admixture_naive.stan', line 33, column 4 to column 39)",
  " (in 'simple_admixture_naive.stan', line 34, column 4 to column 33)",
  " (in 'simple_admixture_naive.stan', line 35, column 4 to column 36)",
  " (in 'simple_admixture_naive.stan', line 36, column 4 to column 38)",
  " (in 'simple_admixture_naive.stan', line 43, column 6 to column 31)",
  " (in 'simple_admixture_naive.stan', line 42, column 19 to line 44, column 5)",
  " (in 'simple_admixture_naive.stan', line 42, column 4 to line 44, column 5)",
  " (in 'simple_admixture_naive.stan', line 45, column 4 to column 24)",
  " (in 'simple_admixture_naive.stan', line 46, column 4 to column 28)",
  " (in 'simple_admixture_naive.stan', line 47, column 4 to column 28)",
  " (in 'simple_admixture_naive.stan', line 50, column 6 to column 18)",
  " (in 'simple_admixture_naive.stan', line 51, column 6 to column 17)",
  " (in 'simple_admixture_naive.stan', line 119, column 8 to column 108)",
  " (in 'simple_admixture_naive.stan', line 127, column 10 to column 53)",
  " (in 'simple_admixture_naive.stan', line 126, column 12 to line 128, column 9)",
  " (in 'simple_admixture_naive.stan', line 121, column 10 to column 24)",
  " (in 'simple_admixture_naive.stan', line 122, column 10 to column 20)",
  " (in 'simple_admixture_naive.stan', line 123, column 10 to column 20)",
  " (in 'simple_admixture_naive.stan', line 124, column 10 to column 26)",
  " (in 'simple_admixture_naive.stan', line 120, column 28 to line 125, column 9)",
  " (in 'simple_admixture_naive.stan', line 120, column 8 to line 128, column 9)",
  " (in 'simple_admixture_naive.stan', line 118, column 10 to line 129, column 7)",
  " (in 'simple_admixture_naive.stan', line 106, column 8 to column 123)",
  " (in 'simple_admixture_naive.stan', line 114, column 10 to column 53)",
  " (in 'simple_admixture_naive.stan', line 113, column 12 to line 115, column 9)",
  " (in 'simple_admixture_naive.stan', line 108, column 10 to column 24)",
  " (in 'simple_admixture_naive.stan', line 109, column 10 to column 20)",
  " (in 'simple_admixture_naive.stan', line 110, column 10 to column 20)",
  " (in 'simple_admixture_naive.stan', line 111, column 10 to column 26)",
  " (in 'simple_admixture_naive.stan', line 107, column 28 to line 112, column 9)",
  " (in 'simple_admixture_naive.stan', line 107, column 8 to line 115, column 9)",
  " (in 'simple_admixture_naive.stan', line 105, column 48 to line 116, column 7)",
  " (in 'simple_admixture_naive.stan', line 105, column 11 to line 129, column 7)",
  " (in 'simple_admixture_naive.stan', line 93, column 8 to column 226)",
  " (in 'simple_admixture_naive.stan', line 101, column 10 to column 53)",
  " (in 'simple_admixture_naive.stan', line 100, column 12 to line 102, column 9)",
  " (in 'simple_admixture_naive.stan', line 95, column 10 to column 24)",
  " (in 'simple_admixture_naive.stan', line 96, column 10 to column 20)",
  " (in 'simple_admixture_naive.stan', line 97, column 10 to column 20)",
  " (in 'simple_admixture_naive.stan', line 98, column 10 to column 26)",
  " (in 'simple_admixture_naive.stan', line 94, column 28 to line 99, column 9)",
  " (in 'simple_admixture_naive.stan', line 94, column 8 to line 102, column 9)",
  " (in 'simple_admixture_naive.stan', line 92, column 48 to line 103, column 7)",
  " (in 'simple_admixture_naive.stan', line 92, column 11 to line 129, column 7)",
  " (in 'simple_admixture_naive.stan', line 80, column 8 to column 72)",
  " (in 'simple_admixture_naive.stan', line 88, column 10 to column 53)",
  " (in 'simple_admixture_naive.stan', line 87, column 12 to line 89, column 9)",
  " (in 'simple_admixture_naive.stan', line 82, column 10 to column 24)",
  " (in 'simple_admixture_naive.stan', line 83, column 10 to column 20)",
  " (in 'simple_admixture_naive.stan', line 84, column 10 to column 20)",
  " (in 'simple_admixture_naive.stan', line 85, column 10 to column 26)",
  " (in 'simple_admixture_naive.stan', line 81, column 28 to line 86, column 9)",
  " (in 'simple_admixture_naive.stan', line 81, column 8 to line 89, column 9)",
  " (in 'simple_admixture_naive.stan', line 79, column 48 to line 90, column 7)",
  " (in 'simple_admixture_naive.stan', line 79, column 11 to line 129, column 7)",
  " (in 'simple_admixture_naive.stan', line 67, column 8 to column 120)",
  " (in 'simple_admixture_naive.stan', line 75, column 10 to column 53)",
  " (in 'simple_admixture_naive.stan', line 74, column 12 to line 76, column 9)",
  " (in 'simple_admixture_naive.stan', line 69, column 10 to column 24)",
  " (in 'simple_admixture_naive.stan', line 70, column 10 to column 20)",
  " (in 'simple_admixture_naive.stan', line 71, column 10 to column 20)",
  " (in 'simple_admixture_naive.stan', line 72, column 10 to column 26)",
  " (in 'simple_admixture_naive.stan', line 68, column 28 to line 73, column 9)",
  " (in 'simple_admixture_naive.stan', line 68, column 8 to line 76, column 9)",
  " (in 'simple_admixture_naive.stan', line 66, column 48 to line 77, column 7)",
  " (in 'simple_admixture_naive.stan', line 66, column 11 to line 129, column 7)",
  " (in 'simple_admixture_naive.stan', line 54, column 8 to column 108)",
  " (in 'simple_admixture_naive.stan', line 62, column 10 to column 53)",
  " (in 'simple_admixture_naive.stan', line 61, column 12 to line 63, column 9)",
  " (in 'simple_admixture_naive.stan', line 56, column 10 to column 24)",
  " (in 'simple_admixture_naive.stan', line 57, column 10 to column 20)",
  " (in 'simple_admixture_naive.stan', line 58, column 10 to column 20)",
  " (in 'simple_admixture_naive.stan', line 59, column 10 to column 26)",
  " (in 'simple_admixture_naive.stan', line 55, column 28 to line 60, column 9)",
  " (in 'simple_admixture_naive.stan', line 55, column 8 to line 63, column 9)",
  " (in 'simple_admixture_naive.stan', line 53, column 43 to line 64, column 7)",
  " (in 'simple_admixture_naive.stan', line 53, column 6 to line 129, column 7)",
  " (in 'simple_admixture_naive.stan', line 49, column 23 to line 130, column 5)",
  " (in 'simple_admixture_naive.stan', line 49, column 4 to line 130, column 5)",
  " (in 'simple_admixture_naive.stan', line 24, column 2 to column 21)",
  " (in 'simple_admixture_naive.stan', line 25, column 18 to column 23)",
  " (in 'simple_admixture_naive.stan', line 25, column 2 to column 27)",
  " (in 'simple_admixture_naive.stan', line 26, column 18 to column 23)",
  " (in 'simple_admixture_naive.stan', line 26, column 2 to column 27)",
  " (in 'simple_admixture_naive.stan', line 27, column 8 to column 13)",
  " (in 'simple_admixture_naive.stan', line 27, column 2 to column 26)",
  " (in 'simple_admixture_naive.stan', line 28, column 8 to column 13)",
  " (in 'simple_admixture_naive.stan', line 28, column 2 to column 27)",
  " (in 'simple_admixture_naive.stan', line 29, column 2 to column 14)",
  " (in 'simple_admixture_naive.stan', line 3, column 8 to column 35)",
  " (in 'simple_admixture_naive.stan', line 4, column 8 to column 135)",
  " (in 'simple_admixture_naive.stan', line 5, column 8 to column 38)",
  " (in 'simple_admixture_naive.stan', line 6, column 8 to column 24)",
  " (in 'simple_admixture_naive.stan', line 2, column 56 to line 7, column 5)",
  " (in 'simple_admixture_naive.stan', line 9, column 8 to column 32)",
  " (in 'simple_admixture_naive.stan', line 10, column 8 to column 32)",
  " (in 'simple_admixture_naive.stan', line 11, column 8 to column 102)",
  " (in 'simple_admixture_naive.stan', line 12, column 8 to column 101)",
  " (in 'simple_admixture_naive.stan', line 13, column 8 to column 27)",
  " (in 'simple_admixture_naive.stan', line 14, column 8 to column 27)",
  " (in 'simple_admixture_naive.stan', line 8, column 68 to line 15, column 5)",
  " (in 'simple_admixture_naive.stan', line 17, column 8 to column 32)",
  " (in 'simple_admixture_naive.stan', line 18, column 8 to column 32)",
  " (in 'simple_admixture_naive.stan', line 19, column 8 to column 98)",
  " (in 'simple_admixture_naive.stan', line 16, column 64 to line 20, column 5)"};
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<T0__>>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<T1__>>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<T2__>>,
                              stan::math::disjunction<stan::is_autodiff<T3__>,
                                                      std::is_floating_point<T3__>>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__, T3__>
p_L_divide_l(const T0__& N, const T1__& t1, const T2__& t2, const T3__& l,
             std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<T0__>>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<T1__>>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<T2__>>,
                              stan::math::disjunction<stan::is_autodiff<T3__>,
                                                      std::is_floating_point<T3__>>,
                              stan::math::disjunction<stan::is_autodiff<T4__>,
                                                      std::is_floating_point<T4__>>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__, T3__, T4__>
int_p_L_divide_l(const T0__& N, const T1__& t1, const T2__& t2, const T3__&
                 u, const T4__& v, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<T0__>>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<T1__>>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<T2__>>,
                              stan::math::disjunction<stan::is_autodiff<T3__>,
                                                      std::is_floating_point<T3__>>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__, T3__>
int_p_L_divide_l_limit(const T0__& N, const T1__& t, const T2__& u,
                       const T3__& v, std::ostream* pstream__);
// real p_L_divide_l(real, real, real, real)
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<T0__>>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<T1__>>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<T2__>>,
                              stan::math::disjunction<stan::is_autodiff<T3__>,
                                                      std::is_floating_point<T3__>>>*>
stan::promote_args_t<T0__, T1__, T2__, T3__>
p_L_divide_l(const T0__& N, const T1__& t1, const T2__& t2, const T3__& l,
             std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ c = DUMMY_VAR__;
    current_statement__ = 90;
    c = -(((l / 50) + (1 / N)));
    local_scalar_t__ output = DUMMY_VAR__;
    current_statement__ = 91;
    output = (((stan::math::exp((c * t2)) * ((stan::math::pow((c * t2), 2) -
      ((2 * c) * t2)) + 2)) / stan::math::pow(c, 3)) -
      ((stan::math::exp((c * t1)) * ((stan::math::pow((c * t1), 2) - ((2 * c)
      * t1)) + 2)) / stan::math::pow(c, 3)));
    local_scalar_t__ r = DUMMY_VAR__;
    current_statement__ = 92;
    r = (stan::math::exp((t1 / N)) / (2500 * N));
    current_statement__ = 93;
    return (r * output);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// real int_p_L_divide_l(real, real, real, real, real)
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<T0__>>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<T1__>>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<T2__>>,
                              stan::math::disjunction<stan::is_autodiff<T3__>,
                                                      std::is_floating_point<T3__>>,
                              stan::math::disjunction<stan::is_autodiff<T4__>,
                                                      std::is_floating_point<T4__>>>*>
stan::promote_args_t<T0__, T1__, T2__, T3__, T4__>
int_p_L_divide_l(const T0__& N, const T1__& t1, const T2__& t2, const T3__&
                 u, const T4__& v, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__, T4__>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ c1 = DUMMY_VAR__;
    current_statement__ = 95;
    c1 = -(((v / 50) + (1 / N)));
    local_scalar_t__ c2 = DUMMY_VAR__;
    current_statement__ = 96;
    c2 = -(((u / 50) + (1 / N)));
    local_scalar_t__ k1 = DUMMY_VAR__;
    current_statement__ = 97;
    k1 = ((-(1) / (50 * N)) * (((stan::math::exp((c1 * t2)) * ((c1 * t2) -
      1)) / stan::math::pow(c1, 2)) - ((stan::math::exp((c1 * t1)) * ((c1 *
      t1) - 1)) / stan::math::pow(c1, 2))));
    local_scalar_t__ k2 = DUMMY_VAR__;
    current_statement__ = 98;
    k2 = ((1 / (50 * N)) * (((stan::math::exp((c2 * t2)) * ((c2 * t2) - 1)) /
      stan::math::pow(c2, 2)) - ((stan::math::exp((c2 * t1)) * ((c2 * t1) -
      1)) / stan::math::pow(c2, 2))));
    local_scalar_t__ r = DUMMY_VAR__;
    current_statement__ = 99;
    r = stan::math::exp((t1 / N));
    current_statement__ = 100;
    return (r * (k1 + k2));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// real int_p_L_divide_l_limit(real, real, real, real)
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<T0__>>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<T1__>>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<T2__>>,
                              stan::math::disjunction<stan::is_autodiff<T3__>,
                                                      std::is_floating_point<T3__>>>*>
stan::promote_args_t<T0__, T1__, T2__, T3__>
int_p_L_divide_l_limit(const T0__& N, const T1__& t, const T2__& u,
                       const T3__& v, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ cu = DUMMY_VAR__;
    current_statement__ = 102;
    cu = -(((1 / N) + (u / 50)));
    local_scalar_t__ cv = DUMMY_VAR__;
    current_statement__ = 103;
    cv = -(((1 / N) + (v / 50)));
    current_statement__ = 104;
    return (((-(1) / (50 * N)) * stan::math::exp((t / N))) *
           (((stan::math::exp((cu * t)) * ((cu * t) - 1)) /
           stan::math::pow(cu, 2)) - ((stan::math::exp((cv * t)) * ((cv * t)
           - 1)) / stan::math::pow(cv, 2))));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
class simple_admixture_naive_model final : public model_base_crtp<simple_admixture_naive_model> {
 private:
  int N_obs;
  Eigen::Matrix<double,-1,1> u_data__;
  Eigen::Matrix<double,-1,1> v_data__;
  std::vector<int> number;
  std::vector<std::vector<int>> group;
  double length;
  Eigen::Map<Eigen::Matrix<double,-1,1>> u{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> v{nullptr, 0};
 public:
  ~simple_admixture_naive_model() {}
  simple_admixture_naive_model(stan::io::var_context& context__, unsigned int
                               random_seed__ = 0, std::ostream*
                               pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "simple_admixture_naive_model_namespace::simple_admixture_naive_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 80;
      context__.validate_dims("data initialization", "N_obs", "int",
        std::vector<size_t>{});
      N_obs = std::numeric_limits<int>::min();
      current_statement__ = 80;
      N_obs = context__.vals_i("N_obs")[(1 - 1)];
      current_statement__ = 80;
      stan::math::check_greater_or_equal(function__, "N_obs", N_obs, 0);
      current_statement__ = 81;
      stan::math::validate_non_negative_index("u", "N_obs", N_obs);
      current_statement__ = 82;
      context__.validate_dims("data initialization", "u", "double",
        std::vector<size_t>{static_cast<size_t>(N_obs)});
      u_data__ = Eigen::Matrix<double,-1,1>::Constant(N_obs,
                   std::numeric_limits<double>::quiet_NaN());
      new (&u) Eigen::Map<Eigen::Matrix<double,-1,1>>(u_data__.data(), N_obs);
      {
        std::vector<local_scalar_t__> u_flat__;
        current_statement__ = 82;
        u_flat__ = context__.vals_r("u");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
          stan::model::assign(u, u_flat__[(pos__ - 1)],
            "assigning variable u", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 82;
      stan::math::check_greater_or_equal(function__, "u", u, 0);
      current_statement__ = 83;
      stan::math::validate_non_negative_index("v", "N_obs", N_obs);
      current_statement__ = 84;
      context__.validate_dims("data initialization", "v", "double",
        std::vector<size_t>{static_cast<size_t>(N_obs)});
      v_data__ = Eigen::Matrix<double,-1,1>::Constant(N_obs,
                   std::numeric_limits<double>::quiet_NaN());
      new (&v) Eigen::Map<Eigen::Matrix<double,-1,1>>(v_data__.data(), N_obs);
      {
        std::vector<local_scalar_t__> v_flat__;
        current_statement__ = 84;
        v_flat__ = context__.vals_r("v");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
          stan::model::assign(v, v_flat__[(pos__ - 1)],
            "assigning variable v", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 84;
      stan::math::check_greater_or_equal(function__, "v", v, 0);
      current_statement__ = 85;
      stan::math::validate_non_negative_index("number", "N_obs", N_obs);
      current_statement__ = 86;
      context__.validate_dims("data initialization", "number", "int",
        std::vector<size_t>{static_cast<size_t>(N_obs)});
      number = std::vector<int>(N_obs, std::numeric_limits<int>::min());
      current_statement__ = 86;
      number = context__.vals_i("number");
      current_statement__ = 87;
      stan::math::validate_non_negative_index("group", "N_obs", N_obs);
      current_statement__ = 88;
      context__.validate_dims("data initialization", "group", "int",
        std::vector<size_t>{static_cast<size_t>(N_obs),
          static_cast<size_t>(2)});
      group = std::vector<std::vector<int>>(N_obs,
                std::vector<int>(2, std::numeric_limits<int>::min()));
      {
        std::vector<int> group_flat__;
        current_statement__ = 88;
        group_flat__ = context__.vals_i("group");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_obs; ++sym2__) {
            stan::model::assign(group, group_flat__[(pos__ - 1)],
              "assigning variable group", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 89;
      context__.validate_dims("data initialization", "length", "double",
        std::vector<size_t>{});
      length = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 89;
      length = context__.vals_r("length")[(1 - 1)];
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 4 + 1 + 1 + 1;
  }
  inline std::string model_name() const final {
    return "simple_admixture_naive_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.33.1",
             "stancflags = --filename-in-msg=simple_admixture_naive.stan"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "simple_admixture_naive_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> N =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(4, DUMMY_VAR__);
      current_statement__ = 1;
      N = in__.template read_constrain_lub<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 100000,
            lp__, 4);
      local_scalar_t__ T1 = DUMMY_VAR__;
      current_statement__ = 2;
      T1 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(1,
             200, lp__);
      local_scalar_t__ T2 = DUMMY_VAR__;
      current_statement__ = 3;
      T2 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>((T1
             + 1), 1000, lp__);
      local_scalar_t__ fraction = DUMMY_VAR__;
      current_statement__ = 4;
      fraction = in__.template read_constrain_lub<local_scalar_t__,
                   jacobian__>(0, 1, lp__);
      {
        current_statement__ = 7;
        for (int i = 1; i <= 4; ++i) {
          current_statement__ = 5;
          lp_accum__.add(stan::math::uniform_lpdf<propto__>(
                           stan::model::rvalue(N, "N",
                             stan::model::index_uni(i)), 1, 100000));
        }
        current_statement__ = 8;
        lp_accum__.add(stan::math::uniform_lpdf<propto__>(T1, 1, 200));
        current_statement__ = 9;
        lp_accum__.add(stan::math::uniform_lpdf<propto__>(T2, (T1 + 1), 1000));
        current_statement__ = 10;
        lp_accum__.add(stan::math::uniform_lpdf<propto__>(fraction, 0, 1));
        current_statement__ = 79;
        for (int i = 1; i <= N_obs; ++i) {
          local_scalar_t__ lambda = DUMMY_VAR__;
          current_statement__ = 12;
          lambda = 1;
          current_statement__ = 77;
          if ((stan::math::primitive_value(
                 stan::math::logical_eq(
                   stan::model::rvalue(
                     stan::model::rvalue(group, "group",
                       stan::model::index_uni(i)), "group[i]",
                     stan::model::index_uni(1)), 0))
              &&
              stan::math::primitive_value(
                stan::math::logical_eq(
                  stan::model::rvalue(
                    stan::model::rvalue(group, "group",
                      stan::model::index_uni(i)), "group[i]",
                    stan::model::index_uni(2)), 0)))) {
            current_statement__ = 67;
            lambda = ((int_p_L_divide_l(
                         stan::model::rvalue(N, "N",
                           stan::model::index_uni(1)),
                         static_cast<double>(0), T2,
                         stan::model::rvalue(u, "u",
                           stan::model::index_uni(i)),
                         stan::model::rvalue(v, "v",
                           stan::model::index_uni(i)), pstream__)
              +
              int_p_L_divide_l_limit(
                stan::model::rvalue(N, "N", stan::model::index_uni(4)), T2,
                stan::model::rvalue(u, "u", stan::model::index_uni(i)),
                stan::model::rvalue(v, "v", stan::model::index_uni(i)),
                pstream__))
              * length);
            current_statement__ = 75;
            if (stan::math::is_nan(lambda)) {
              current_statement__ = 70;
              if (pstream__) {
                stan::math::stan_print(pstream__, lambda);
                *(pstream__) << std::endl;
              }
              current_statement__ = 71;
              if (pstream__) {
                stan::math::stan_print(pstream__, T1);
                *(pstream__) << std::endl;
              }
              current_statement__ = 72;
              if (pstream__) {
                stan::math::stan_print(pstream__, T2);
                *(pstream__) << std::endl;
              }
              current_statement__ = 73;
              if (pstream__) {
                stan::math::stan_print(pstream__, fraction);
                *(pstream__) << std::endl;
              }
            } else {
              current_statement__ = 68;
              lp_accum__.add(stan::math::poisson_lpmf<false>(
                               stan::model::rvalue(number, "number",
                                 stan::model::index_uni(i)), lambda));
            }
          } else {
            current_statement__ = 66;
            if ((stan::math::primitive_value(
                   stan::math::logical_eq(
                     stan::model::rvalue(
                       stan::model::rvalue(group, "group",
                         stan::model::index_uni(i)), "group[i]",
                       stan::model::index_uni(1)), 0))
                &&
                stan::math::primitive_value(
                  stan::math::logical_eq(
                    stan::model::rvalue(
                      stan::model::rvalue(group, "group",
                        stan::model::index_uni(i)), "group[i]",
                      stan::model::index_uni(2)), 1)))) {
              current_statement__ = 56;
              lambda = (((fraction *
                int_p_L_divide_l(
                  stan::model::rvalue(N, "N", stan::model::index_uni(1)), T1,
                  T2, stan::model::rvalue(u, "u", stan::model::index_uni(i)),
                  stan::model::rvalue(v, "v", stan::model::index_uni(i)),
                  pstream__))
                +
                int_p_L_divide_l_limit(
                  stan::model::rvalue(N, "N", stan::model::index_uni(4)), T2,
                  stan::model::rvalue(u, "u", stan::model::index_uni(i)),
                  stan::model::rvalue(v, "v", stan::model::index_uni(i)),
                  pstream__))
                * length);
              current_statement__ = 64;
              if (stan::math::is_nan(lambda)) {
                current_statement__ = 59;
                if (pstream__) {
                  stan::math::stan_print(pstream__, lambda);
                  *(pstream__) << std::endl;
                }
                current_statement__ = 60;
                if (pstream__) {
                  stan::math::stan_print(pstream__, T1);
                  *(pstream__) << std::endl;
                }
                current_statement__ = 61;
                if (pstream__) {
                  stan::math::stan_print(pstream__, T2);
                  *(pstream__) << std::endl;
                }
                current_statement__ = 62;
                if (pstream__) {
                  stan::math::stan_print(pstream__, fraction);
                  *(pstream__) << std::endl;
                }
              } else {
                current_statement__ = 57;
                lp_accum__.add(stan::math::poisson_lpmf<false>(
                                 stan::model::rvalue(number, "number",
                                   stan::model::index_uni(i)), lambda));
              }
            } else {
              current_statement__ = 55;
              if ((stan::math::primitive_value(
                     stan::math::logical_eq(
                       stan::model::rvalue(
                         stan::model::rvalue(group, "group",
                           stan::model::index_uni(i)), "group[i]",
                         stan::model::index_uni(1)), 0))
                  &&
                  stan::math::primitive_value(
                    stan::math::logical_eq(
                      stan::model::rvalue(
                        stan::model::rvalue(group, "group",
                          stan::model::index_uni(i)), "group[i]",
                        stan::model::index_uni(2)), 2)))) {
                current_statement__ = 45;
                lambda = (int_p_L_divide_l(
                            stan::model::rvalue(N, "N",
                              stan::model::index_uni(4)), T2,
                            static_cast<double>(100000000),
                            stan::model::rvalue(u, "u",
                              stan::model::index_uni(i)),
                            stan::model::rvalue(v, "v",
                              stan::model::index_uni(i)), pstream__)
                  * length);
                current_statement__ = 53;
                if (stan::math::is_nan(lambda)) {
                  current_statement__ = 48;
                  if (pstream__) {
                    stan::math::stan_print(pstream__, lambda);
                    *(pstream__) << std::endl;
                  }
                  current_statement__ = 49;
                  if (pstream__) {
                    stan::math::stan_print(pstream__, T1);
                    *(pstream__) << std::endl;
                  }
                  current_statement__ = 50;
                  if (pstream__) {
                    stan::math::stan_print(pstream__, T2);
                    *(pstream__) << std::endl;
                  }
                  current_statement__ = 51;
                  if (pstream__) {
                    stan::math::stan_print(pstream__, fraction);
                    *(pstream__) << std::endl;
                  }
                } else {
                  current_statement__ = 46;
                  lp_accum__.add(stan::math::poisson_lpmf<false>(
                                   stan::model::rvalue(number, "number",
                                     stan::model::index_uni(i)), lambda));
                }
              } else {
                current_statement__ = 44;
                if ((stan::math::primitive_value(
                       stan::math::logical_eq(
                         stan::model::rvalue(
                           stan::model::rvalue(group, "group",
                             stan::model::index_uni(i)), "group[i]",
                           stan::model::index_uni(1)), 1))
                    &&
                    stan::math::primitive_value(
                      stan::math::logical_eq(
                        stan::model::rvalue(
                          stan::model::rvalue(group, "group",
                            stan::model::index_uni(i)), "group[i]",
                          stan::model::index_uni(2)), 1)))) {
                  current_statement__ = 34;
                  lambda = ((((int_p_L_divide_l(
                                 stan::model::rvalue(N, "N",
                                   stan::model::index_uni(2)),
                                 static_cast<double>(0), T1,
                                 stan::model::rvalue(u, "u",
                                   stan::model::index_uni(i)),
                                 stan::model::rvalue(v, "v",
                                   stan::model::index_uni(i)), pstream__)
                    + (stan::math::pow(fraction, 2) *
                    int_p_L_divide_l(
                      stan::model::rvalue(N, "N", stan::model::index_uni(1)),
                      T1, T2,
                      stan::model::rvalue(u, "u", stan::model::index_uni(i)),
                      stan::model::rvalue(v, "v", stan::model::index_uni(i)),
                      pstream__)))
                    + (stan::math::pow((1 - fraction), 2) *
                    int_p_L_divide_l(
                      stan::model::rvalue(N, "N", stan::model::index_uni(3)),
                      T1, T2,
                      stan::model::rvalue(u, "u", stan::model::index_uni(i)),
                      stan::model::rvalue(v, "v", stan::model::index_uni(i)),
                      pstream__)))
                    +
                    int_p_L_divide_l_limit(
                      stan::model::rvalue(N, "N", stan::model::index_uni(4)),
                      T2,
                      stan::model::rvalue(u, "u", stan::model::index_uni(i)),
                      stan::model::rvalue(v, "v", stan::model::index_uni(i)),
                      pstream__))
                    * length);
                  current_statement__ = 42;
                  if (stan::math::is_nan(lambda)) {
                    current_statement__ = 37;
                    if (pstream__) {
                      stan::math::stan_print(pstream__, lambda);
                      *(pstream__) << std::endl;
                    }
                    current_statement__ = 38;
                    if (pstream__) {
                      stan::math::stan_print(pstream__, T1);
                      *(pstream__) << std::endl;
                    }
                    current_statement__ = 39;
                    if (pstream__) {
                      stan::math::stan_print(pstream__, T2);
                      *(pstream__) << std::endl;
                    }
                    current_statement__ = 40;
                    if (pstream__) {
                      stan::math::stan_print(pstream__, fraction);
                      *(pstream__) << std::endl;
                    }
                  } else {
                    current_statement__ = 35;
                    lp_accum__.add(stan::math::poisson_lpmf<false>(
                                     stan::model::rvalue(number, "number",
                                       stan::model::index_uni(i)), lambda));
                  }
                } else {
                  current_statement__ = 33;
                  if ((stan::math::primitive_value(
                         stan::math::logical_eq(
                           stan::model::rvalue(
                             stan::model::rvalue(group, "group",
                               stan::model::index_uni(i)), "group[i]",
                             stan::model::index_uni(1)), 1))
                      &&
                      stan::math::primitive_value(
                        stan::math::logical_eq(
                          stan::model::rvalue(
                            stan::model::rvalue(group, "group",
                              stan::model::index_uni(i)), "group[i]",
                            stan::model::index_uni(2)), 2)))) {
                    current_statement__ = 23;
                    lambda = ((((1 - fraction) *
                      int_p_L_divide_l(
                        stan::model::rvalue(N, "N", stan::model::index_uni(3)),
                        T1, T2,
                        stan::model::rvalue(u, "u", stan::model::index_uni(i)),
                        stan::model::rvalue(v, "v", stan::model::index_uni(i)),
                        pstream__))
                      +
                      int_p_L_divide_l_limit(
                        stan::model::rvalue(N, "N", stan::model::index_uni(4)),
                        T2,
                        stan::model::rvalue(u, "u", stan::model::index_uni(i)),
                        stan::model::rvalue(v, "v", stan::model::index_uni(i)),
                        pstream__))
                      * length);
                    current_statement__ = 31;
                    if (stan::math::is_nan(lambda)) {
                      current_statement__ = 26;
                      if (pstream__) {
                        stan::math::stan_print(pstream__, lambda);
                        *(pstream__) << std::endl;
                      }
                      current_statement__ = 27;
                      if (pstream__) {
                        stan::math::stan_print(pstream__, T1);
                        *(pstream__) << std::endl;
                      }
                      current_statement__ = 28;
                      if (pstream__) {
                        stan::math::stan_print(pstream__, T2);
                        *(pstream__) << std::endl;
                      }
                      current_statement__ = 29;
                      if (pstream__) {
                        stan::math::stan_print(pstream__, fraction);
                        *(pstream__) << std::endl;
                      }
                    } else {
                      current_statement__ = 24;
                      lp_accum__.add(stan::math::poisson_lpmf<false>(
                                       stan::model::rvalue(number, "number",
                                         stan::model::index_uni(i)), lambda));
                    }
                  } else {
                    current_statement__ = 13;
                    lambda = ((int_p_L_divide_l(
                                 stan::model::rvalue(N, "N",
                                   stan::model::index_uni(3)),
                                 static_cast<double>(0), T2,
                                 stan::model::rvalue(u, "u",
                                   stan::model::index_uni(i)),
                                 stan::model::rvalue(v, "v",
                                   stan::model::index_uni(i)), pstream__)
                      +
                      int_p_L_divide_l_limit(
                        stan::model::rvalue(N, "N", stan::model::index_uni(4)),
                        T2,
                        stan::model::rvalue(u, "u", stan::model::index_uni(i)),
                        stan::model::rvalue(v, "v", stan::model::index_uni(i)),
                        pstream__))
                      * length);
                    current_statement__ = 21;
                    if (stan::math::is_nan(lambda)) {
                      current_statement__ = 16;
                      if (pstream__) {
                        stan::math::stan_print(pstream__, lambda);
                        *(pstream__) << std::endl;
                      }
                      current_statement__ = 17;
                      if (pstream__) {
                        stan::math::stan_print(pstream__, T1);
                        *(pstream__) << std::endl;
                      }
                      current_statement__ = 18;
                      if (pstream__) {
                        stan::math::stan_print(pstream__, T2);
                        *(pstream__) << std::endl;
                      }
                      current_statement__ = 19;
                      if (pstream__) {
                        stan::math::stan_print(pstream__, fraction);
                        *(pstream__) << std::endl;
                      }
                    } else {
                      current_statement__ = 14;
                      lp_accum__.add(stan::math::poisson_lpmf<false>(
                                       stan::model::rvalue(number, "number",
                                         stan::model::index_uni(i)), lambda));
                    }
                  }
                }
              }
            }
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "simple_admixture_naive_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> N =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(4, DUMMY_VAR__);
      current_statement__ = 1;
      N = in__.template read_constrain_lub<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 100000,
            lp__, 4);
      local_scalar_t__ T1 = DUMMY_VAR__;
      current_statement__ = 2;
      T1 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(1,
             200, lp__);
      local_scalar_t__ T2 = DUMMY_VAR__;
      current_statement__ = 3;
      T2 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>((T1
             + 1), 1000, lp__);
      local_scalar_t__ fraction = DUMMY_VAR__;
      current_statement__ = 4;
      fraction = in__.template read_constrain_lub<local_scalar_t__,
                   jacobian__>(0, 1, lp__);
      {
        current_statement__ = 7;
        for (int i = 1; i <= 4; ++i) {
          current_statement__ = 5;
          lp_accum__.add(stan::math::uniform_lpdf<propto__>(
                           stan::model::rvalue(N, "N",
                             stan::model::index_uni(i)), 1, 100000));
        }
        current_statement__ = 8;
        lp_accum__.add(stan::math::uniform_lpdf<propto__>(T1, 1, 200));
        current_statement__ = 9;
        lp_accum__.add(stan::math::uniform_lpdf<propto__>(T2, (T1 + 1), 1000));
        current_statement__ = 10;
        lp_accum__.add(stan::math::uniform_lpdf<propto__>(fraction, 0, 1));
        current_statement__ = 79;
        for (int i = 1; i <= N_obs; ++i) {
          local_scalar_t__ lambda = DUMMY_VAR__;
          current_statement__ = 12;
          lambda = 1;
          current_statement__ = 77;
          if ((stan::math::primitive_value(
                 stan::math::logical_eq(
                   stan::model::rvalue(
                     stan::model::rvalue(group, "group",
                       stan::model::index_uni(i)), "group[i]",
                     stan::model::index_uni(1)), 0))
              &&
              stan::math::primitive_value(
                stan::math::logical_eq(
                  stan::model::rvalue(
                    stan::model::rvalue(group, "group",
                      stan::model::index_uni(i)), "group[i]",
                    stan::model::index_uni(2)), 0)))) {
            current_statement__ = 67;
            lambda = ((int_p_L_divide_l(
                         stan::model::rvalue(N, "N",
                           stan::model::index_uni(1)),
                         static_cast<double>(0), T2,
                         stan::model::rvalue(u, "u",
                           stan::model::index_uni(i)),
                         stan::model::rvalue(v, "v",
                           stan::model::index_uni(i)), pstream__)
              +
              int_p_L_divide_l_limit(
                stan::model::rvalue(N, "N", stan::model::index_uni(4)), T2,
                stan::model::rvalue(u, "u", stan::model::index_uni(i)),
                stan::model::rvalue(v, "v", stan::model::index_uni(i)),
                pstream__))
              * length);
            current_statement__ = 75;
            if (stan::math::is_nan(lambda)) {
              current_statement__ = 70;
              if (pstream__) {
                stan::math::stan_print(pstream__, lambda);
                *(pstream__) << std::endl;
              }
              current_statement__ = 71;
              if (pstream__) {
                stan::math::stan_print(pstream__, T1);
                *(pstream__) << std::endl;
              }
              current_statement__ = 72;
              if (pstream__) {
                stan::math::stan_print(pstream__, T2);
                *(pstream__) << std::endl;
              }
              current_statement__ = 73;
              if (pstream__) {
                stan::math::stan_print(pstream__, fraction);
                *(pstream__) << std::endl;
              }
            } else {
              current_statement__ = 68;
              lp_accum__.add(stan::math::poisson_lpmf<false>(
                               stan::model::rvalue(number, "number",
                                 stan::model::index_uni(i)), lambda));
            }
          } else {
            current_statement__ = 66;
            if ((stan::math::primitive_value(
                   stan::math::logical_eq(
                     stan::model::rvalue(
                       stan::model::rvalue(group, "group",
                         stan::model::index_uni(i)), "group[i]",
                       stan::model::index_uni(1)), 0))
                &&
                stan::math::primitive_value(
                  stan::math::logical_eq(
                    stan::model::rvalue(
                      stan::model::rvalue(group, "group",
                        stan::model::index_uni(i)), "group[i]",
                      stan::model::index_uni(2)), 1)))) {
              current_statement__ = 56;
              lambda = (((fraction *
                int_p_L_divide_l(
                  stan::model::rvalue(N, "N", stan::model::index_uni(1)), T1,
                  T2, stan::model::rvalue(u, "u", stan::model::index_uni(i)),
                  stan::model::rvalue(v, "v", stan::model::index_uni(i)),
                  pstream__))
                +
                int_p_L_divide_l_limit(
                  stan::model::rvalue(N, "N", stan::model::index_uni(4)), T2,
                  stan::model::rvalue(u, "u", stan::model::index_uni(i)),
                  stan::model::rvalue(v, "v", stan::model::index_uni(i)),
                  pstream__))
                * length);
              current_statement__ = 64;
              if (stan::math::is_nan(lambda)) {
                current_statement__ = 59;
                if (pstream__) {
                  stan::math::stan_print(pstream__, lambda);
                  *(pstream__) << std::endl;
                }
                current_statement__ = 60;
                if (pstream__) {
                  stan::math::stan_print(pstream__, T1);
                  *(pstream__) << std::endl;
                }
                current_statement__ = 61;
                if (pstream__) {
                  stan::math::stan_print(pstream__, T2);
                  *(pstream__) << std::endl;
                }
                current_statement__ = 62;
                if (pstream__) {
                  stan::math::stan_print(pstream__, fraction);
                  *(pstream__) << std::endl;
                }
              } else {
                current_statement__ = 57;
                lp_accum__.add(stan::math::poisson_lpmf<false>(
                                 stan::model::rvalue(number, "number",
                                   stan::model::index_uni(i)), lambda));
              }
            } else {
              current_statement__ = 55;
              if ((stan::math::primitive_value(
                     stan::math::logical_eq(
                       stan::model::rvalue(
                         stan::model::rvalue(group, "group",
                           stan::model::index_uni(i)), "group[i]",
                         stan::model::index_uni(1)), 0))
                  &&
                  stan::math::primitive_value(
                    stan::math::logical_eq(
                      stan::model::rvalue(
                        stan::model::rvalue(group, "group",
                          stan::model::index_uni(i)), "group[i]",
                        stan::model::index_uni(2)), 2)))) {
                current_statement__ = 45;
                lambda = (int_p_L_divide_l(
                            stan::model::rvalue(N, "N",
                              stan::model::index_uni(4)), T2,
                            static_cast<double>(100000000),
                            stan::model::rvalue(u, "u",
                              stan::model::index_uni(i)),
                            stan::model::rvalue(v, "v",
                              stan::model::index_uni(i)), pstream__)
                  * length);
                current_statement__ = 53;
                if (stan::math::is_nan(lambda)) {
                  current_statement__ = 48;
                  if (pstream__) {
                    stan::math::stan_print(pstream__, lambda);
                    *(pstream__) << std::endl;
                  }
                  current_statement__ = 49;
                  if (pstream__) {
                    stan::math::stan_print(pstream__, T1);
                    *(pstream__) << std::endl;
                  }
                  current_statement__ = 50;
                  if (pstream__) {
                    stan::math::stan_print(pstream__, T2);
                    *(pstream__) << std::endl;
                  }
                  current_statement__ = 51;
                  if (pstream__) {
                    stan::math::stan_print(pstream__, fraction);
                    *(pstream__) << std::endl;
                  }
                } else {
                  current_statement__ = 46;
                  lp_accum__.add(stan::math::poisson_lpmf<false>(
                                   stan::model::rvalue(number, "number",
                                     stan::model::index_uni(i)), lambda));
                }
              } else {
                current_statement__ = 44;
                if ((stan::math::primitive_value(
                       stan::math::logical_eq(
                         stan::model::rvalue(
                           stan::model::rvalue(group, "group",
                             stan::model::index_uni(i)), "group[i]",
                           stan::model::index_uni(1)), 1))
                    &&
                    stan::math::primitive_value(
                      stan::math::logical_eq(
                        stan::model::rvalue(
                          stan::model::rvalue(group, "group",
                            stan::model::index_uni(i)), "group[i]",
                          stan::model::index_uni(2)), 1)))) {
                  current_statement__ = 34;
                  lambda = ((((int_p_L_divide_l(
                                 stan::model::rvalue(N, "N",
                                   stan::model::index_uni(2)),
                                 static_cast<double>(0), T1,
                                 stan::model::rvalue(u, "u",
                                   stan::model::index_uni(i)),
                                 stan::model::rvalue(v, "v",
                                   stan::model::index_uni(i)), pstream__)
                    + (stan::math::pow(fraction, 2) *
                    int_p_L_divide_l(
                      stan::model::rvalue(N, "N", stan::model::index_uni(1)),
                      T1, T2,
                      stan::model::rvalue(u, "u", stan::model::index_uni(i)),
                      stan::model::rvalue(v, "v", stan::model::index_uni(i)),
                      pstream__)))
                    + (stan::math::pow((1 - fraction), 2) *
                    int_p_L_divide_l(
                      stan::model::rvalue(N, "N", stan::model::index_uni(3)),
                      T1, T2,
                      stan::model::rvalue(u, "u", stan::model::index_uni(i)),
                      stan::model::rvalue(v, "v", stan::model::index_uni(i)),
                      pstream__)))
                    +
                    int_p_L_divide_l_limit(
                      stan::model::rvalue(N, "N", stan::model::index_uni(4)),
                      T2,
                      stan::model::rvalue(u, "u", stan::model::index_uni(i)),
                      stan::model::rvalue(v, "v", stan::model::index_uni(i)),
                      pstream__))
                    * length);
                  current_statement__ = 42;
                  if (stan::math::is_nan(lambda)) {
                    current_statement__ = 37;
                    if (pstream__) {
                      stan::math::stan_print(pstream__, lambda);
                      *(pstream__) << std::endl;
                    }
                    current_statement__ = 38;
                    if (pstream__) {
                      stan::math::stan_print(pstream__, T1);
                      *(pstream__) << std::endl;
                    }
                    current_statement__ = 39;
                    if (pstream__) {
                      stan::math::stan_print(pstream__, T2);
                      *(pstream__) << std::endl;
                    }
                    current_statement__ = 40;
                    if (pstream__) {
                      stan::math::stan_print(pstream__, fraction);
                      *(pstream__) << std::endl;
                    }
                  } else {
                    current_statement__ = 35;
                    lp_accum__.add(stan::math::poisson_lpmf<false>(
                                     stan::model::rvalue(number, "number",
                                       stan::model::index_uni(i)), lambda));
                  }
                } else {
                  current_statement__ = 33;
                  if ((stan::math::primitive_value(
                         stan::math::logical_eq(
                           stan::model::rvalue(
                             stan::model::rvalue(group, "group",
                               stan::model::index_uni(i)), "group[i]",
                             stan::model::index_uni(1)), 1))
                      &&
                      stan::math::primitive_value(
                        stan::math::logical_eq(
                          stan::model::rvalue(
                            stan::model::rvalue(group, "group",
                              stan::model::index_uni(i)), "group[i]",
                            stan::model::index_uni(2)), 2)))) {
                    current_statement__ = 23;
                    lambda = ((((1 - fraction) *
                      int_p_L_divide_l(
                        stan::model::rvalue(N, "N", stan::model::index_uni(3)),
                        T1, T2,
                        stan::model::rvalue(u, "u", stan::model::index_uni(i)),
                        stan::model::rvalue(v, "v", stan::model::index_uni(i)),
                        pstream__))
                      +
                      int_p_L_divide_l_limit(
                        stan::model::rvalue(N, "N", stan::model::index_uni(4)),
                        T2,
                        stan::model::rvalue(u, "u", stan::model::index_uni(i)),
                        stan::model::rvalue(v, "v", stan::model::index_uni(i)),
                        pstream__))
                      * length);
                    current_statement__ = 31;
                    if (stan::math::is_nan(lambda)) {
                      current_statement__ = 26;
                      if (pstream__) {
                        stan::math::stan_print(pstream__, lambda);
                        *(pstream__) << std::endl;
                      }
                      current_statement__ = 27;
                      if (pstream__) {
                        stan::math::stan_print(pstream__, T1);
                        *(pstream__) << std::endl;
                      }
                      current_statement__ = 28;
                      if (pstream__) {
                        stan::math::stan_print(pstream__, T2);
                        *(pstream__) << std::endl;
                      }
                      current_statement__ = 29;
                      if (pstream__) {
                        stan::math::stan_print(pstream__, fraction);
                        *(pstream__) << std::endl;
                      }
                    } else {
                      current_statement__ = 24;
                      lp_accum__.add(stan::math::poisson_lpmf<false>(
                                       stan::model::rvalue(number, "number",
                                         stan::model::index_uni(i)), lambda));
                    }
                  } else {
                    current_statement__ = 13;
                    lambda = ((int_p_L_divide_l(
                                 stan::model::rvalue(N, "N",
                                   stan::model::index_uni(3)),
                                 static_cast<double>(0), T2,
                                 stan::model::rvalue(u, "u",
                                   stan::model::index_uni(i)),
                                 stan::model::rvalue(v, "v",
                                   stan::model::index_uni(i)), pstream__)
                      +
                      int_p_L_divide_l_limit(
                        stan::model::rvalue(N, "N", stan::model::index_uni(4)),
                        T2,
                        stan::model::rvalue(u, "u", stan::model::index_uni(i)),
                        stan::model::rvalue(v, "v", stan::model::index_uni(i)),
                        pstream__))
                      * length);
                    current_statement__ = 21;
                    if (stan::math::is_nan(lambda)) {
                      current_statement__ = 16;
                      if (pstream__) {
                        stan::math::stan_print(pstream__, lambda);
                        *(pstream__) << std::endl;
                      }
                      current_statement__ = 17;
                      if (pstream__) {
                        stan::math::stan_print(pstream__, T1);
                        *(pstream__) << std::endl;
                      }
                      current_statement__ = 18;
                      if (pstream__) {
                        stan::math::stan_print(pstream__, T2);
                        *(pstream__) << std::endl;
                      }
                      current_statement__ = 19;
                      if (pstream__) {
                        stan::math::stan_print(pstream__, fraction);
                        *(pstream__) << std::endl;
                      }
                    } else {
                      current_statement__ = 14;
                      lp_accum__.add(stan::math::poisson_lpmf<false>(
                                       stan::model::rvalue(number, "number",
                                         stan::model::index_uni(i)), lambda));
                    }
                  }
                }
              }
            }
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "simple_admixture_naive_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> N =
        Eigen::Matrix<double,-1,1>::Constant(4,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      N = in__.template read_constrain_lub<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 100000,
            lp__, 4);
      double T1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      T1 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(1,
             200, lp__);
      double T2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      T2 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>((T1
             + 1), 1000, lp__);
      double fraction = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      fraction = in__.template read_constrain_lub<local_scalar_t__,
                   jacobian__>(0, 1, lp__);
      out__.write(N);
      out__.write(T1);
      out__.write(T2);
      out__.write(fraction);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> N =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(4, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(N,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(4),
        "assigning variable N");
      out__.write_free_lub(0, 100000, N);
      local_scalar_t__ T1 = DUMMY_VAR__;
      current_statement__ = 2;
      T1 = in__.read<local_scalar_t__>();
      out__.write_free_lub(1, 200, T1);
      local_scalar_t__ T2 = DUMMY_VAR__;
      current_statement__ = 3;
      T2 = in__.read<local_scalar_t__>();
      out__.write_free_lub((T1 + 1), 1000, T2);
      local_scalar_t__ fraction = DUMMY_VAR__;
      current_statement__ = 4;
      fraction = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, fraction);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "N", "double",
        std::vector<size_t>{static_cast<size_t>(4)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "T1", "double",
        std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "T2", "double",
        std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "fraction",
        "double", std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> N =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(4, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> N_flat__;
        current_statement__ = 1;
        N_flat__ = context__.vals_r("N");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          stan::model::assign(N, N_flat__[(pos__ - 1)],
            "assigning variable N", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(0, 100000, N);
      local_scalar_t__ T1 = DUMMY_VAR__;
      current_statement__ = 2;
      T1 = context__.vals_r("T1")[(1 - 1)];
      out__.write_free_lub(1, 200, T1);
      local_scalar_t__ T2 = DUMMY_VAR__;
      current_statement__ = 3;
      T2 = context__.vals_r("T2")[(1 - 1)];
      out__.write_free_lub((T1 + 1), 1000, T2);
      local_scalar_t__ fraction = DUMMY_VAR__;
      current_statement__ = 4;
      fraction = context__.vals_r("fraction")[(1 - 1)];
      out__.write_free_lub(0, 1, fraction);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"N", "T1", "T2", "fraction"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(4)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
      param_names__.emplace_back(std::string() + "N" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "T1");
    param_names__.emplace_back(std::string() + "T2");
    param_names__.emplace_back(std::string() + "fraction");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
      param_names__.emplace_back(std::string() + "N" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "T1");
    param_names__.emplace_back(std::string() + "T2");
    param_names__.emplace_back(std::string() + "fraction");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"N\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(4) + "},\"block\":\"parameters\"},{\"name\":\"T1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"T2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"fraction\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"N\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(4) + "},\"block\":\"parameters\"},{\"name\":\"T1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"T2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"fraction\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((4 + 1) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((4 + 1) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = simple_admixture_naive_model_namespace::simple_admixture_naive_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return simple_admixture_naive_model_namespace::profiles__;
}
#endif