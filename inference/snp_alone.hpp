// Code generated by stanc v2.33.1
#include <stan/model/model_header.hpp>
namespace snp_alone_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 78> locations_array__ =
  {" (found before start of program)",
  " (in 'snp_alone.stan', line 11, column 4 to column 39)",
  " (in 'snp_alone.stan', line 12, column 4 to column 38)",
  " (in 'snp_alone.stan', line 13, column 4 to column 45)",
  " (in 'snp_alone.stan', line 14, column 4 to column 33)",
  " (in 'snp_alone.stan', line 18, column 3 to column 21)",
  " (in 'snp_alone.stan', line 19, column 3 to column 26)",
  " (in 'snp_alone.stan', line 20, column 3 to column 21)",
  " (in 'snp_alone.stan', line 21, column 3 to column 26)",
  " (in 'snp_alone.stan', line 22, column 3 to column 35)",
  " (in 'snp_alone.stan', line 23, column 3 to column 30)",
  " (in 'snp_alone.stan', line 24, column 3 to column 21)",
  " (in 'snp_alone.stan', line 25, column 3 to column 28)",
  " (in 'snp_alone.stan', line 26, column 3 to column 34)",
  " (in 'snp_alone.stan', line 27, column 3 to column 18)",
  " (in 'snp_alone.stan', line 28, column 3 to column 17)",
  " (in 'snp_alone.stan', line 29, column 3 to column 80)",
  " (in 'snp_alone.stan', line 30, column 3 to column 36)",
  " (in 'snp_alone.stan', line 31, column 3 to column 17)",
  " (in 'snp_alone.stan', line 32, column 3 to column 28)",
  " (in 'snp_alone.stan', line 33, column 3 to column 17)",
  " (in 'snp_alone.stan', line 34, column 3 to column 18)",
  " (in 'snp_alone.stan', line 35, column 3 to column 155)",
  " (in 'snp_alone.stan', line 36, column 3 to column 195)",
  " (in 'snp_alone.stan', line 37, column 3 to column 195)",
  " (in 'snp_alone.stan', line 38, column 3 to column 195)",
  " (in 'snp_alone.stan', line 39, column 3 to column 155)",
  " (in 'snp_alone.stan', line 40, column 3 to column 195)",
  " (in 'snp_alone.stan', line 41, column 3 to column 195)",
  " (in 'snp_alone.stan', line 42, column 3 to column 155)",
  " (in 'snp_alone.stan', line 43, column 3 to column 194)",
  " (in 'snp_alone.stan', line 44, column 3 to column 155)",
  " (in 'snp_alone.stan', line 50, column 6 to column 31)",
  " (in 'snp_alone.stan', line 49, column 19 to line 51, column 5)",
  " (in 'snp_alone.stan', line 49, column 4 to line 51, column 5)",
  " (in 'snp_alone.stan', line 52, column 4 to column 23)",
  " (in 'snp_alone.stan', line 53, column 4 to column 28)",
  " (in 'snp_alone.stan', line 94, column 8 to column 57)",
  " (in 'snp_alone.stan', line 93, column 48 to line 95, column 7)",
  " (in 'snp_alone.stan', line 93, column 11 to line 95, column 7)",
  " (in 'snp_alone.stan', line 91, column 8 to column 57)",
  " (in 'snp_alone.stan', line 90, column 48 to line 92, column 7)",
  " (in 'snp_alone.stan', line 90, column 11 to line 95, column 7)",
  " (in 'snp_alone.stan', line 88, column 8 to column 57)",
  " (in 'snp_alone.stan', line 87, column 48 to line 89, column 7)",
  " (in 'snp_alone.stan', line 87, column 11 to line 95, column 7)",
  " (in 'snp_alone.stan', line 85, column 8 to column 57)",
  " (in 'snp_alone.stan', line 84, column 48 to line 86, column 7)",
  " (in 'snp_alone.stan', line 84, column 11 to line 95, column 7)",
  " (in 'snp_alone.stan', line 81, column 8 to column 57)",
  " (in 'snp_alone.stan', line 80, column 48 to line 82, column 7)",
  " (in 'snp_alone.stan', line 80, column 11 to line 95, column 7)",
  " (in 'snp_alone.stan', line 76, column 8 to column 57)",
  " (in 'snp_alone.stan', line 75, column 48 to line 77, column 7)",
  " (in 'snp_alone.stan', line 75, column 11 to line 95, column 7)",
  " (in 'snp_alone.stan', line 72, column 8 to column 57)",
  " (in 'snp_alone.stan', line 71, column 48 to line 73, column 7)",
  " (in 'snp_alone.stan', line 71, column 11 to line 95, column 7)",
  " (in 'snp_alone.stan', line 67, column 8 to column 57)",
  " (in 'snp_alone.stan', line 66, column 48 to line 68, column 7)",
  " (in 'snp_alone.stan', line 66, column 11 to line 95, column 7)",
  " (in 'snp_alone.stan', line 63, column 8 to column 57)",
  " (in 'snp_alone.stan', line 62, column 48 to line 64, column 7)",
  " (in 'snp_alone.stan', line 62, column 11 to line 95, column 7)",
  " (in 'snp_alone.stan', line 59, column 8 to column 57)",
  " (in 'snp_alone.stan', line 58, column 43 to line 60, column 7)",
  " (in 'snp_alone.stan', line 58, column 6 to line 95, column 7)",
  " (in 'snp_alone.stan', line 55, column 23 to line 96, column 5)",
  " (in 'snp_alone.stan', line 55, column 4 to line 96, column 5)",
  " (in 'snp_alone.stan', line 2, column 2 to column 21)",
  " (in 'snp_alone.stan', line 3, column 2 to column 22)",
  " (in 'snp_alone.stan', line 4, column 8 to column 13)",
  " (in 'snp_alone.stan', line 4, column 2 to column 27)",
  " (in 'snp_alone.stan', line 5, column 8 to column 13)",
  " (in 'snp_alone.stan', line 5, column 2 to column 37)",
  " (in 'snp_alone.stan', line 6, column 2 to column 30)",
  " (in 'snp_alone.stan', line 7, column 8 to column 13)",
  " (in 'snp_alone.stan', line 7, column 2 to column 27)"};
class snp_alone_model final : public model_base_crtp<snp_alone_model> {
 private:
  int N_obs;
  double N_pop;
  std::vector<double> d_mean;
  std::vector<double> d_var;
  double ancestral_T;
  std::vector<std::vector<int>> group;
 public:
  ~snp_alone_model() {}
  snp_alone_model(stan::io::var_context& context__, unsigned int
                  random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "snp_alone_model_namespace::snp_alone_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 69;
      context__.validate_dims("data initialization", "N_obs", "int",
        std::vector<size_t>{});
      N_obs = std::numeric_limits<int>::min();
      current_statement__ = 69;
      N_obs = context__.vals_i("N_obs")[(1 - 1)];
      current_statement__ = 69;
      stan::math::check_greater_or_equal(function__, "N_obs", N_obs, 0);
      current_statement__ = 70;
      context__.validate_dims("data initialization", "N_pop", "double",
        std::vector<size_t>{});
      N_pop = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 70;
      N_pop = context__.vals_r("N_pop")[(1 - 1)];
      current_statement__ = 70;
      stan::math::check_greater_or_equal(function__, "N_pop", N_pop, 0);
      current_statement__ = 71;
      stan::math::validate_non_negative_index("d_mean", "N_obs", N_obs);
      current_statement__ = 72;
      context__.validate_dims("data initialization", "d_mean", "double",
        std::vector<size_t>{static_cast<size_t>(N_obs)});
      d_mean = std::vector<double>(N_obs,
                 std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 72;
      d_mean = context__.vals_r("d_mean");
      current_statement__ = 73;
      stan::math::validate_non_negative_index("d_var", "N_obs", N_obs);
      current_statement__ = 74;
      context__.validate_dims("data initialization", "d_var", "double",
        std::vector<size_t>{static_cast<size_t>(N_obs)});
      d_var = std::vector<double>(N_obs,
                std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 74;
      d_var = context__.vals_r("d_var");
      current_statement__ = 74;
      stan::math::check_greater_or_equal(function__, "d_var", d_var, 0);
      current_statement__ = 75;
      context__.validate_dims("data initialization", "ancestral_T", "double",
        std::vector<size_t>{});
      ancestral_T = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 75;
      ancestral_T = context__.vals_r("ancestral_T")[(1 - 1)];
      current_statement__ = 75;
      stan::math::check_greater_or_equal(function__, "ancestral_T",
        ancestral_T, 0);
      current_statement__ = 76;
      stan::math::validate_non_negative_index("group", "N_obs", N_obs);
      current_statement__ = 77;
      context__.validate_dims("data initialization", "group", "int",
        std::vector<size_t>{static_cast<size_t>(N_obs),
          static_cast<size_t>(2)});
      group = std::vector<std::vector<int>>(N_obs,
                std::vector<int>(2, std::numeric_limits<int>::min()));
      {
        std::vector<int> group_flat__;
        current_statement__ = 77;
        group_flat__ = context__.vals_i("group");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_obs; ++sym2__) {
            stan::model::assign(group, group_flat__[(pos__ - 1)],
              "assigning variable group", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 5 + 1 + 1 + 1;
  }
  inline std::string model_name() const final {
    return "snp_alone_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.33.1",
             "stancflags = --filename-in-msg=snp_alone.stan"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "snp_alone_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> N =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(5, DUMMY_VAR__);
      current_statement__ = 1;
      N = in__.template read_constrain_lub<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(1, 100000,
            lp__, 5);
      local_scalar_t__ fraction = DUMMY_VAR__;
      current_statement__ = 2;
      fraction = in__.template read_constrain_lub<local_scalar_t__,
                   jacobian__>(0, 1, lp__);
      local_scalar_t__ T2 = DUMMY_VAR__;
      current_statement__ = 3;
      T2 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(1,
             ancestral_T, lp__);
      local_scalar_t__ T1 = DUMMY_VAR__;
      current_statement__ = 4;
      T1 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(1,
             T2, lp__);
      local_scalar_t__ c1 = DUMMY_VAR__;
      current_statement__ = 5;
      c1 = (T1 / stan::model::rvalue(N, "N", stan::model::index_uni(1)));
      local_scalar_t__ c2 = DUMMY_VAR__;
      current_statement__ = 6;
      c2 = ((T2 - T1) /
        stan::model::rvalue(N, "N", stan::model::index_uni(1)));
      local_scalar_t__ c3 = DUMMY_VAR__;
      current_statement__ = 7;
      c3 = (T1 / stan::model::rvalue(N, "N", stan::model::index_uni(3)));
      local_scalar_t__ c4 = DUMMY_VAR__;
      current_statement__ = 8;
      c4 = ((T2 - T1) /
        stan::model::rvalue(N, "N", stan::model::index_uni(3)));
      local_scalar_t__ c5 = DUMMY_VAR__;
      current_statement__ = 9;
      c5 = ((ancestral_T - T2) /
        stan::model::rvalue(N, "N", stan::model::index_uni(4)));
      local_scalar_t__ c6 = DUMMY_VAR__;
      current_statement__ = 10;
      c6 = (ancestral_T /
        stan::model::rvalue(N, "N", stan::model::index_uni(5)));
      local_scalar_t__ c7 = DUMMY_VAR__;
      current_statement__ = 11;
      c7 = (T1 / stan::model::rvalue(N, "N", stan::model::index_uni(2)));
      local_scalar_t__ a_11 = DUMMY_VAR__;
      current_statement__ = 12;
      a_11 = ((c1 + c2) + c5);
      local_scalar_t__ a_12 = DUMMY_VAR__;
      current_statement__ = 13;
      a_12 = ((fraction * c2) + c5);
      local_scalar_t__ a_13 = DUMMY_VAR__;
      current_statement__ = 14;
      a_13 = c5;
      local_scalar_t__ a_14 = DUMMY_VAR__;
      current_statement__ = 15;
      a_14 = 0;
      local_scalar_t__ a_22 = DUMMY_VAR__;
      current_statement__ = 16;
      a_22 = ((c7 + (stan::math::pow(fraction, 2) * (c2 + c5))) +
        (stan::math::pow((1 - fraction), 2) * (c4 + c5)));
      local_scalar_t__ a_23 = DUMMY_VAR__;
      current_statement__ = 17;
      a_23 = (((1 - fraction) * c4) + c5);
      local_scalar_t__ a_24 = DUMMY_VAR__;
      current_statement__ = 18;
      a_24 = 0;
      local_scalar_t__ a_33 = DUMMY_VAR__;
      current_statement__ = 19;
      a_33 = ((c3 + c4) + c5);
      local_scalar_t__ a_34 = DUMMY_VAR__;
      current_statement__ = 20;
      a_34 = 0;
      local_scalar_t__ a_44 = DUMMY_VAR__;
      current_statement__ = 21;
      a_44 = c6;
      local_scalar_t__ W_11 = DUMMY_VAR__;
      current_statement__ = 22;
      W_11 = ((a_11 - ((2 / N_pop) * (((a_11 + a_12) + a_13) + a_14))) + ((1
        / stan::math::pow(N_pop, 2)) * ((((a_11 + a_22) + a_33) + a_44) + (2
        * (((((a_12 + a_13) + a_14) + a_23) + a_34) + a_24)))));
      local_scalar_t__ W_12 = DUMMY_VAR__;
      current_statement__ = 23;
      W_12 = (((a_12 - ((1 / N_pop) * (((a_11 + a_12) + a_13) + a_14))) - ((1
        / N_pop) * (((a_12 + a_22) + a_23) + a_24))) + ((1 /
        stan::math::pow(N_pop, 2)) * ((((a_11 + a_22) + a_33) + a_44) + (2 *
        (((((a_12 + a_13) + a_14) + a_23) + a_34) + a_24)))));
      local_scalar_t__ W_13 = DUMMY_VAR__;
      current_statement__ = 24;
      W_13 = (((a_13 - ((1 / N_pop) * (((a_11 + a_12) + a_13) + a_14))) - ((1
        / N_pop) * (((a_13 + a_23) + a_33) + a_34))) + ((1 /
        stan::math::pow(N_pop, 2)) * ((((a_11 + a_22) + a_33) + a_44) + (2 *
        (((((a_12 + a_13) + a_14) + a_23) + a_34) + a_24)))));
      local_scalar_t__ W_14 = DUMMY_VAR__;
      current_statement__ = 25;
      W_14 = (((a_14 - ((1 / N_pop) * (((a_11 + a_12) + a_13) + a_14))) - ((1
        / N_pop) * (((a_14 + a_24) + a_34) + a_44))) + ((1 /
        stan::math::pow(N_pop, 2)) * ((((a_11 + a_22) + a_33) + a_44) + (2 *
        (((((a_12 + a_13) + a_14) + a_23) + a_34) + a_24)))));
      local_scalar_t__ W_22 = DUMMY_VAR__;
      current_statement__ = 26;
      W_22 = ((a_22 - ((2 / N_pop) * (((a_12 + a_22) + a_23) + a_24))) + ((1
        / stan::math::pow(N_pop, 2)) * ((((a_11 + a_22) + a_33) + a_44) + (2
        * (((((a_12 + a_13) + a_14) + a_23) + a_34) + a_24)))));
      local_scalar_t__ W_23 = DUMMY_VAR__;
      current_statement__ = 27;
      W_23 = (((a_23 - ((1 / N_pop) * (((a_12 + a_22) + a_23) + a_24))) - ((1
        / N_pop) * (((a_13 + a_23) + a_33) + a_34))) + ((1 /
        stan::math::pow(N_pop, 2)) * ((((a_11 + a_22) + a_33) + a_44) + (2 *
        (((((a_12 + a_13) + a_14) + a_23) + a_34) + a_24)))));
      local_scalar_t__ W_24 = DUMMY_VAR__;
      current_statement__ = 28;
      W_24 = (((a_24 - ((1 / N_pop) * (((a_12 + a_22) + a_23) + a_24))) - ((1
        / N_pop) * (((a_14 + a_24) + a_34) + a_44))) + ((1 /
        stan::math::pow(N_pop, 2)) * ((((a_11 + a_22) + a_33) + a_44) + (2 *
        (((((a_12 + a_13) + a_14) + a_23) + a_34) + a_24)))));
      local_scalar_t__ W_33 = DUMMY_VAR__;
      current_statement__ = 29;
      W_33 = ((a_33 - ((2 / N_pop) * (((a_13 + a_23) + a_33) + a_34))) + ((1
        / stan::math::pow(N_pop, 2)) * ((((a_11 + a_22) + a_33) + a_44) + (2
        * (((((a_12 + a_13) + a_14) + a_23) + a_34) + a_24)))));
      local_scalar_t__ W_34 = DUMMY_VAR__;
      current_statement__ = 30;
      W_34 = (((a_34 - ((1 / N_pop) * (((a_13 + a_23) + a_33) + a_34))) - ((1
        / N_pop) * (((a_14 + a_24) + a_34) + a_44))) + ((1 /
        stan::math::pow(N_pop, 2)) * ((((a_11 + a_22) + a_33) + a_44) + (2 *
        (((((a_12 + a_13) + a_14) + a_23) + a_34) + a_24)))));
      local_scalar_t__ W_44 = DUMMY_VAR__;
      current_statement__ = 31;
      W_44 = ((a_44 - ((2 / N_pop) * (((a_14 + a_24) + a_34) + a_44))) + ((1
        / stan::math::pow(N_pop, 2)) * ((((a_11 + a_22) + a_33) + a_44) + (2
        * (((((a_12 + a_13) + a_14) + a_23) + a_34) + a_24)))));
      {
        current_statement__ = 34;
        for (int i = 1; i <= 4; ++i) {
          current_statement__ = 32;
          lp_accum__.add(stan::math::uniform_lpdf<propto__>(
                           stan::model::rvalue(N, "N",
                             stan::model::index_uni(i)), 1, 100000));
        }
        current_statement__ = 35;
        lp_accum__.add(stan::math::uniform_lpdf<propto__>(T1, 1, T2));
        current_statement__ = 36;
        lp_accum__.add(stan::math::uniform_lpdf<propto__>(fraction, 0, 1));
        current_statement__ = 68;
        for (int i = 1; i <= N_obs; ++i) {
          current_statement__ = 66;
          if ((stan::math::primitive_value(
                 stan::math::logical_eq(
                   stan::model::rvalue(
                     stan::model::rvalue(group, "group",
                       stan::model::index_uni(i)), "group[i]",
                     stan::model::index_uni(1)), 0))
              &&
              stan::math::primitive_value(
                stan::math::logical_eq(
                  stan::model::rvalue(
                    stan::model::rvalue(group, "group",
                      stan::model::index_uni(i)), "group[i]",
                    stan::model::index_uni(2)), 0)))) {
            current_statement__ = 64;
            lp_accum__.add(stan::math::normal_lpdf<false>(
                             stan::model::rvalue(d_mean, "d_mean",
                               stan::model::index_uni(i)), W_11,
                             stan::model::rvalue(d_var, "d_var",
                               stan::model::index_uni(i))));
          } else {
            current_statement__ = 63;
            if ((stan::math::primitive_value(
                   stan::math::logical_eq(
                     stan::model::rvalue(
                       stan::model::rvalue(group, "group",
                         stan::model::index_uni(i)), "group[i]",
                       stan::model::index_uni(1)), 0))
                &&
                stan::math::primitive_value(
                  stan::math::logical_eq(
                    stan::model::rvalue(
                      stan::model::rvalue(group, "group",
                        stan::model::index_uni(i)), "group[i]",
                      stan::model::index_uni(2)), 1)))) {
              current_statement__ = 61;
              lp_accum__.add(stan::math::normal_lpdf<false>(
                               stan::model::rvalue(d_mean, "d_mean",
                                 stan::model::index_uni(i)), W_12,
                               stan::model::rvalue(d_var, "d_var",
                                 stan::model::index_uni(i))));
            } else {
              current_statement__ = 60;
              if ((stan::math::primitive_value(
                     stan::math::logical_eq(
                       stan::model::rvalue(
                         stan::model::rvalue(group, "group",
                           stan::model::index_uni(i)), "group[i]",
                         stan::model::index_uni(1)), 0))
                  &&
                  stan::math::primitive_value(
                    stan::math::logical_eq(
                      stan::model::rvalue(
                        stan::model::rvalue(group, "group",
                          stan::model::index_uni(i)), "group[i]",
                        stan::model::index_uni(2)), 2)))) {
                current_statement__ = 58;
                lp_accum__.add(stan::math::normal_lpdf<false>(
                                 stan::model::rvalue(d_mean, "d_mean",
                                   stan::model::index_uni(i)), W_13,
                                 stan::model::rvalue(d_var, "d_var",
                                   stan::model::index_uni(i))));
              } else {
                current_statement__ = 57;
                if ((stan::math::primitive_value(
                       stan::math::logical_eq(
                         stan::model::rvalue(
                           stan::model::rvalue(group, "group",
                             stan::model::index_uni(i)), "group[i]",
                           stan::model::index_uni(1)), 0))
                    &&
                    stan::math::primitive_value(
                      stan::math::logical_eq(
                        stan::model::rvalue(
                          stan::model::rvalue(group, "group",
                            stan::model::index_uni(i)), "group[i]",
                          stan::model::index_uni(2)), 3)))) {
                  current_statement__ = 55;
                  lp_accum__.add(stan::math::normal_lpdf<false>(
                                   stan::model::rvalue(d_mean, "d_mean",
                                     stan::model::index_uni(i)), W_14,
                                   stan::model::rvalue(d_var, "d_var",
                                     stan::model::index_uni(i))));
                } else {
                  current_statement__ = 54;
                  if ((stan::math::primitive_value(
                         stan::math::logical_eq(
                           stan::model::rvalue(
                             stan::model::rvalue(group, "group",
                               stan::model::index_uni(i)), "group[i]",
                             stan::model::index_uni(1)), 1))
                      &&
                      stan::math::primitive_value(
                        stan::math::logical_eq(
                          stan::model::rvalue(
                            stan::model::rvalue(group, "group",
                              stan::model::index_uni(i)), "group[i]",
                            stan::model::index_uni(2)), 1)))) {
                    current_statement__ = 52;
                    lp_accum__.add(stan::math::normal_lpdf<false>(
                                     stan::model::rvalue(d_mean, "d_mean",
                                       stan::model::index_uni(i)), W_22,
                                     stan::model::rvalue(d_var, "d_var",
                                       stan::model::index_uni(i))));
                  } else {
                    current_statement__ = 51;
                    if ((stan::math::primitive_value(
                           stan::math::logical_eq(
                             stan::model::rvalue(
                               stan::model::rvalue(group, "group",
                                 stan::model::index_uni(i)), "group[i]",
                               stan::model::index_uni(1)), 1))
                        &&
                        stan::math::primitive_value(
                          stan::math::logical_eq(
                            stan::model::rvalue(
                              stan::model::rvalue(group, "group",
                                stan::model::index_uni(i)), "group[i]",
                              stan::model::index_uni(2)), 2)))) {
                      current_statement__ = 49;
                      lp_accum__.add(stan::math::normal_lpdf<false>(
                                       stan::model::rvalue(d_mean, "d_mean",
                                         stan::model::index_uni(i)), W_23,
                                       stan::model::rvalue(d_var, "d_var",
                                         stan::model::index_uni(i))));
                    } else {
                      current_statement__ = 48;
                      if ((stan::math::primitive_value(
                             stan::math::logical_eq(
                               stan::model::rvalue(
                                 stan::model::rvalue(group, "group",
                                   stan::model::index_uni(i)), "group[i]",
                                 stan::model::index_uni(1)), 1))
                          &&
                          stan::math::primitive_value(
                            stan::math::logical_eq(
                              stan::model::rvalue(
                                stan::model::rvalue(group, "group",
                                  stan::model::index_uni(i)), "group[i]",
                                stan::model::index_uni(2)), 3)))) {
                        current_statement__ = 46;
                        lp_accum__.add(stan::math::normal_lpdf<false>(
                                         stan::model::rvalue(d_mean,
                                           "d_mean",
                                           stan::model::index_uni(i)), W_24,
                                         stan::model::rvalue(d_var, "d_var",
                                           stan::model::index_uni(i))));
                      } else {
                        current_statement__ = 45;
                        if ((stan::math::primitive_value(
                               stan::math::logical_eq(
                                 stan::model::rvalue(
                                   stan::model::rvalue(group, "group",
                                     stan::model::index_uni(i)), "group[i]",
                                   stan::model::index_uni(1)), 2))
                            &&
                            stan::math::primitive_value(
                              stan::math::logical_eq(
                                stan::model::rvalue(
                                  stan::model::rvalue(group, "group",
                                    stan::model::index_uni(i)), "group[i]",
                                  stan::model::index_uni(2)), 2)))) {
                          current_statement__ = 43;
                          lp_accum__.add(stan::math::normal_lpdf<false>(
                                           stan::model::rvalue(d_mean,
                                             "d_mean",
                                             stan::model::index_uni(i)),
                                           W_33,
                                           stan::model::rvalue(d_var,
                                             "d_var",
                                             stan::model::index_uni(i))));
                        } else {
                          current_statement__ = 42;
                          if ((stan::math::primitive_value(
                                 stan::math::logical_eq(
                                   stan::model::rvalue(
                                     stan::model::rvalue(group, "group",
                                       stan::model::index_uni(i)),
                                     "group[i]", stan::model::index_uni(1)),
                                   2))
                              &&
                              stan::math::primitive_value(
                                stan::math::logical_eq(
                                  stan::model::rvalue(
                                    stan::model::rvalue(group, "group",
                                      stan::model::index_uni(i)), "group[i]",
                                    stan::model::index_uni(2)), 3)))) {
                            current_statement__ = 40;
                            lp_accum__.add(stan::math::normal_lpdf<false>(
                                             stan::model::rvalue(d_mean,
                                               "d_mean",
                                               stan::model::index_uni(i)),
                                             W_34,
                                             stan::model::rvalue(d_var,
                                               "d_var",
                                               stan::model::index_uni(i))));
                          } else {
                            current_statement__ = 39;
                            if ((stan::math::primitive_value(
                                   stan::math::logical_eq(
                                     stan::model::rvalue(
                                       stan::model::rvalue(group, "group",
                                         stan::model::index_uni(i)),
                                       "group[i]", stan::model::index_uni(1)),
                                     3))
                                &&
                                stan::math::primitive_value(
                                  stan::math::logical_eq(
                                    stan::model::rvalue(
                                      stan::model::rvalue(group, "group",
                                        stan::model::index_uni(i)),
                                      "group[i]", stan::model::index_uni(2)),
                                    3)))) {
                              current_statement__ = 37;
                              lp_accum__.add(stan::math::normal_lpdf<false>(
                                               stan::model::rvalue(d_mean,
                                                 "d_mean",
                                                 stan::model::index_uni(i)),
                                               W_44,
                                               stan::model::rvalue(d_var,
                                                 "d_var",
                                                 stan::model::index_uni(i))));
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "snp_alone_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> N =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(5, DUMMY_VAR__);
      current_statement__ = 1;
      N = in__.template read_constrain_lub<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(1, 100000,
            lp__, 5);
      local_scalar_t__ fraction = DUMMY_VAR__;
      current_statement__ = 2;
      fraction = in__.template read_constrain_lub<local_scalar_t__,
                   jacobian__>(0, 1, lp__);
      local_scalar_t__ T2 = DUMMY_VAR__;
      current_statement__ = 3;
      T2 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(1,
             ancestral_T, lp__);
      local_scalar_t__ T1 = DUMMY_VAR__;
      current_statement__ = 4;
      T1 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(1,
             T2, lp__);
      local_scalar_t__ c1 = DUMMY_VAR__;
      current_statement__ = 5;
      c1 = (T1 / stan::model::rvalue(N, "N", stan::model::index_uni(1)));
      local_scalar_t__ c2 = DUMMY_VAR__;
      current_statement__ = 6;
      c2 = ((T2 - T1) /
        stan::model::rvalue(N, "N", stan::model::index_uni(1)));
      local_scalar_t__ c3 = DUMMY_VAR__;
      current_statement__ = 7;
      c3 = (T1 / stan::model::rvalue(N, "N", stan::model::index_uni(3)));
      local_scalar_t__ c4 = DUMMY_VAR__;
      current_statement__ = 8;
      c4 = ((T2 - T1) /
        stan::model::rvalue(N, "N", stan::model::index_uni(3)));
      local_scalar_t__ c5 = DUMMY_VAR__;
      current_statement__ = 9;
      c5 = ((ancestral_T - T2) /
        stan::model::rvalue(N, "N", stan::model::index_uni(4)));
      local_scalar_t__ c6 = DUMMY_VAR__;
      current_statement__ = 10;
      c6 = (ancestral_T /
        stan::model::rvalue(N, "N", stan::model::index_uni(5)));
      local_scalar_t__ c7 = DUMMY_VAR__;
      current_statement__ = 11;
      c7 = (T1 / stan::model::rvalue(N, "N", stan::model::index_uni(2)));
      local_scalar_t__ a_11 = DUMMY_VAR__;
      current_statement__ = 12;
      a_11 = ((c1 + c2) + c5);
      local_scalar_t__ a_12 = DUMMY_VAR__;
      current_statement__ = 13;
      a_12 = ((fraction * c2) + c5);
      local_scalar_t__ a_13 = DUMMY_VAR__;
      current_statement__ = 14;
      a_13 = c5;
      local_scalar_t__ a_14 = DUMMY_VAR__;
      current_statement__ = 15;
      a_14 = 0;
      local_scalar_t__ a_22 = DUMMY_VAR__;
      current_statement__ = 16;
      a_22 = ((c7 + (stan::math::pow(fraction, 2) * (c2 + c5))) +
        (stan::math::pow((1 - fraction), 2) * (c4 + c5)));
      local_scalar_t__ a_23 = DUMMY_VAR__;
      current_statement__ = 17;
      a_23 = (((1 - fraction) * c4) + c5);
      local_scalar_t__ a_24 = DUMMY_VAR__;
      current_statement__ = 18;
      a_24 = 0;
      local_scalar_t__ a_33 = DUMMY_VAR__;
      current_statement__ = 19;
      a_33 = ((c3 + c4) + c5);
      local_scalar_t__ a_34 = DUMMY_VAR__;
      current_statement__ = 20;
      a_34 = 0;
      local_scalar_t__ a_44 = DUMMY_VAR__;
      current_statement__ = 21;
      a_44 = c6;
      local_scalar_t__ W_11 = DUMMY_VAR__;
      current_statement__ = 22;
      W_11 = ((a_11 - ((2 / N_pop) * (((a_11 + a_12) + a_13) + a_14))) + ((1
        / stan::math::pow(N_pop, 2)) * ((((a_11 + a_22) + a_33) + a_44) + (2
        * (((((a_12 + a_13) + a_14) + a_23) + a_34) + a_24)))));
      local_scalar_t__ W_12 = DUMMY_VAR__;
      current_statement__ = 23;
      W_12 = (((a_12 - ((1 / N_pop) * (((a_11 + a_12) + a_13) + a_14))) - ((1
        / N_pop) * (((a_12 + a_22) + a_23) + a_24))) + ((1 /
        stan::math::pow(N_pop, 2)) * ((((a_11 + a_22) + a_33) + a_44) + (2 *
        (((((a_12 + a_13) + a_14) + a_23) + a_34) + a_24)))));
      local_scalar_t__ W_13 = DUMMY_VAR__;
      current_statement__ = 24;
      W_13 = (((a_13 - ((1 / N_pop) * (((a_11 + a_12) + a_13) + a_14))) - ((1
        / N_pop) * (((a_13 + a_23) + a_33) + a_34))) + ((1 /
        stan::math::pow(N_pop, 2)) * ((((a_11 + a_22) + a_33) + a_44) + (2 *
        (((((a_12 + a_13) + a_14) + a_23) + a_34) + a_24)))));
      local_scalar_t__ W_14 = DUMMY_VAR__;
      current_statement__ = 25;
      W_14 = (((a_14 - ((1 / N_pop) * (((a_11 + a_12) + a_13) + a_14))) - ((1
        / N_pop) * (((a_14 + a_24) + a_34) + a_44))) + ((1 /
        stan::math::pow(N_pop, 2)) * ((((a_11 + a_22) + a_33) + a_44) + (2 *
        (((((a_12 + a_13) + a_14) + a_23) + a_34) + a_24)))));
      local_scalar_t__ W_22 = DUMMY_VAR__;
      current_statement__ = 26;
      W_22 = ((a_22 - ((2 / N_pop) * (((a_12 + a_22) + a_23) + a_24))) + ((1
        / stan::math::pow(N_pop, 2)) * ((((a_11 + a_22) + a_33) + a_44) + (2
        * (((((a_12 + a_13) + a_14) + a_23) + a_34) + a_24)))));
      local_scalar_t__ W_23 = DUMMY_VAR__;
      current_statement__ = 27;
      W_23 = (((a_23 - ((1 / N_pop) * (((a_12 + a_22) + a_23) + a_24))) - ((1
        / N_pop) * (((a_13 + a_23) + a_33) + a_34))) + ((1 /
        stan::math::pow(N_pop, 2)) * ((((a_11 + a_22) + a_33) + a_44) + (2 *
        (((((a_12 + a_13) + a_14) + a_23) + a_34) + a_24)))));
      local_scalar_t__ W_24 = DUMMY_VAR__;
      current_statement__ = 28;
      W_24 = (((a_24 - ((1 / N_pop) * (((a_12 + a_22) + a_23) + a_24))) - ((1
        / N_pop) * (((a_14 + a_24) + a_34) + a_44))) + ((1 /
        stan::math::pow(N_pop, 2)) * ((((a_11 + a_22) + a_33) + a_44) + (2 *
        (((((a_12 + a_13) + a_14) + a_23) + a_34) + a_24)))));
      local_scalar_t__ W_33 = DUMMY_VAR__;
      current_statement__ = 29;
      W_33 = ((a_33 - ((2 / N_pop) * (((a_13 + a_23) + a_33) + a_34))) + ((1
        / stan::math::pow(N_pop, 2)) * ((((a_11 + a_22) + a_33) + a_44) + (2
        * (((((a_12 + a_13) + a_14) + a_23) + a_34) + a_24)))));
      local_scalar_t__ W_34 = DUMMY_VAR__;
      current_statement__ = 30;
      W_34 = (((a_34 - ((1 / N_pop) * (((a_13 + a_23) + a_33) + a_34))) - ((1
        / N_pop) * (((a_14 + a_24) + a_34) + a_44))) + ((1 /
        stan::math::pow(N_pop, 2)) * ((((a_11 + a_22) + a_33) + a_44) + (2 *
        (((((a_12 + a_13) + a_14) + a_23) + a_34) + a_24)))));
      local_scalar_t__ W_44 = DUMMY_VAR__;
      current_statement__ = 31;
      W_44 = ((a_44 - ((2 / N_pop) * (((a_14 + a_24) + a_34) + a_44))) + ((1
        / stan::math::pow(N_pop, 2)) * ((((a_11 + a_22) + a_33) + a_44) + (2
        * (((((a_12 + a_13) + a_14) + a_23) + a_34) + a_24)))));
      {
        current_statement__ = 34;
        for (int i = 1; i <= 4; ++i) {
          current_statement__ = 32;
          lp_accum__.add(stan::math::uniform_lpdf<propto__>(
                           stan::model::rvalue(N, "N",
                             stan::model::index_uni(i)), 1, 100000));
        }
        current_statement__ = 35;
        lp_accum__.add(stan::math::uniform_lpdf<propto__>(T1, 1, T2));
        current_statement__ = 36;
        lp_accum__.add(stan::math::uniform_lpdf<propto__>(fraction, 0, 1));
        current_statement__ = 68;
        for (int i = 1; i <= N_obs; ++i) {
          current_statement__ = 66;
          if ((stan::math::primitive_value(
                 stan::math::logical_eq(
                   stan::model::rvalue(
                     stan::model::rvalue(group, "group",
                       stan::model::index_uni(i)), "group[i]",
                     stan::model::index_uni(1)), 0))
              &&
              stan::math::primitive_value(
                stan::math::logical_eq(
                  stan::model::rvalue(
                    stan::model::rvalue(group, "group",
                      stan::model::index_uni(i)), "group[i]",
                    stan::model::index_uni(2)), 0)))) {
            current_statement__ = 64;
            lp_accum__.add(stan::math::normal_lpdf<false>(
                             stan::model::rvalue(d_mean, "d_mean",
                               stan::model::index_uni(i)), W_11,
                             stan::model::rvalue(d_var, "d_var",
                               stan::model::index_uni(i))));
          } else {
            current_statement__ = 63;
            if ((stan::math::primitive_value(
                   stan::math::logical_eq(
                     stan::model::rvalue(
                       stan::model::rvalue(group, "group",
                         stan::model::index_uni(i)), "group[i]",
                       stan::model::index_uni(1)), 0))
                &&
                stan::math::primitive_value(
                  stan::math::logical_eq(
                    stan::model::rvalue(
                      stan::model::rvalue(group, "group",
                        stan::model::index_uni(i)), "group[i]",
                      stan::model::index_uni(2)), 1)))) {
              current_statement__ = 61;
              lp_accum__.add(stan::math::normal_lpdf<false>(
                               stan::model::rvalue(d_mean, "d_mean",
                                 stan::model::index_uni(i)), W_12,
                               stan::model::rvalue(d_var, "d_var",
                                 stan::model::index_uni(i))));
            } else {
              current_statement__ = 60;
              if ((stan::math::primitive_value(
                     stan::math::logical_eq(
                       stan::model::rvalue(
                         stan::model::rvalue(group, "group",
                           stan::model::index_uni(i)), "group[i]",
                         stan::model::index_uni(1)), 0))
                  &&
                  stan::math::primitive_value(
                    stan::math::logical_eq(
                      stan::model::rvalue(
                        stan::model::rvalue(group, "group",
                          stan::model::index_uni(i)), "group[i]",
                        stan::model::index_uni(2)), 2)))) {
                current_statement__ = 58;
                lp_accum__.add(stan::math::normal_lpdf<false>(
                                 stan::model::rvalue(d_mean, "d_mean",
                                   stan::model::index_uni(i)), W_13,
                                 stan::model::rvalue(d_var, "d_var",
                                   stan::model::index_uni(i))));
              } else {
                current_statement__ = 57;
                if ((stan::math::primitive_value(
                       stan::math::logical_eq(
                         stan::model::rvalue(
                           stan::model::rvalue(group, "group",
                             stan::model::index_uni(i)), "group[i]",
                           stan::model::index_uni(1)), 0))
                    &&
                    stan::math::primitive_value(
                      stan::math::logical_eq(
                        stan::model::rvalue(
                          stan::model::rvalue(group, "group",
                            stan::model::index_uni(i)), "group[i]",
                          stan::model::index_uni(2)), 3)))) {
                  current_statement__ = 55;
                  lp_accum__.add(stan::math::normal_lpdf<false>(
                                   stan::model::rvalue(d_mean, "d_mean",
                                     stan::model::index_uni(i)), W_14,
                                   stan::model::rvalue(d_var, "d_var",
                                     stan::model::index_uni(i))));
                } else {
                  current_statement__ = 54;
                  if ((stan::math::primitive_value(
                         stan::math::logical_eq(
                           stan::model::rvalue(
                             stan::model::rvalue(group, "group",
                               stan::model::index_uni(i)), "group[i]",
                             stan::model::index_uni(1)), 1))
                      &&
                      stan::math::primitive_value(
                        stan::math::logical_eq(
                          stan::model::rvalue(
                            stan::model::rvalue(group, "group",
                              stan::model::index_uni(i)), "group[i]",
                            stan::model::index_uni(2)), 1)))) {
                    current_statement__ = 52;
                    lp_accum__.add(stan::math::normal_lpdf<false>(
                                     stan::model::rvalue(d_mean, "d_mean",
                                       stan::model::index_uni(i)), W_22,
                                     stan::model::rvalue(d_var, "d_var",
                                       stan::model::index_uni(i))));
                  } else {
                    current_statement__ = 51;
                    if ((stan::math::primitive_value(
                           stan::math::logical_eq(
                             stan::model::rvalue(
                               stan::model::rvalue(group, "group",
                                 stan::model::index_uni(i)), "group[i]",
                               stan::model::index_uni(1)), 1))
                        &&
                        stan::math::primitive_value(
                          stan::math::logical_eq(
                            stan::model::rvalue(
                              stan::model::rvalue(group, "group",
                                stan::model::index_uni(i)), "group[i]",
                              stan::model::index_uni(2)), 2)))) {
                      current_statement__ = 49;
                      lp_accum__.add(stan::math::normal_lpdf<false>(
                                       stan::model::rvalue(d_mean, "d_mean",
                                         stan::model::index_uni(i)), W_23,
                                       stan::model::rvalue(d_var, "d_var",
                                         stan::model::index_uni(i))));
                    } else {
                      current_statement__ = 48;
                      if ((stan::math::primitive_value(
                             stan::math::logical_eq(
                               stan::model::rvalue(
                                 stan::model::rvalue(group, "group",
                                   stan::model::index_uni(i)), "group[i]",
                                 stan::model::index_uni(1)), 1))
                          &&
                          stan::math::primitive_value(
                            stan::math::logical_eq(
                              stan::model::rvalue(
                                stan::model::rvalue(group, "group",
                                  stan::model::index_uni(i)), "group[i]",
                                stan::model::index_uni(2)), 3)))) {
                        current_statement__ = 46;
                        lp_accum__.add(stan::math::normal_lpdf<false>(
                                         stan::model::rvalue(d_mean,
                                           "d_mean",
                                           stan::model::index_uni(i)), W_24,
                                         stan::model::rvalue(d_var, "d_var",
                                           stan::model::index_uni(i))));
                      } else {
                        current_statement__ = 45;
                        if ((stan::math::primitive_value(
                               stan::math::logical_eq(
                                 stan::model::rvalue(
                                   stan::model::rvalue(group, "group",
                                     stan::model::index_uni(i)), "group[i]",
                                   stan::model::index_uni(1)), 2))
                            &&
                            stan::math::primitive_value(
                              stan::math::logical_eq(
                                stan::model::rvalue(
                                  stan::model::rvalue(group, "group",
                                    stan::model::index_uni(i)), "group[i]",
                                  stan::model::index_uni(2)), 2)))) {
                          current_statement__ = 43;
                          lp_accum__.add(stan::math::normal_lpdf<false>(
                                           stan::model::rvalue(d_mean,
                                             "d_mean",
                                             stan::model::index_uni(i)),
                                           W_33,
                                           stan::model::rvalue(d_var,
                                             "d_var",
                                             stan::model::index_uni(i))));
                        } else {
                          current_statement__ = 42;
                          if ((stan::math::primitive_value(
                                 stan::math::logical_eq(
                                   stan::model::rvalue(
                                     stan::model::rvalue(group, "group",
                                       stan::model::index_uni(i)),
                                     "group[i]", stan::model::index_uni(1)),
                                   2))
                              &&
                              stan::math::primitive_value(
                                stan::math::logical_eq(
                                  stan::model::rvalue(
                                    stan::model::rvalue(group, "group",
                                      stan::model::index_uni(i)), "group[i]",
                                    stan::model::index_uni(2)), 3)))) {
                            current_statement__ = 40;
                            lp_accum__.add(stan::math::normal_lpdf<false>(
                                             stan::model::rvalue(d_mean,
                                               "d_mean",
                                               stan::model::index_uni(i)),
                                             W_34,
                                             stan::model::rvalue(d_var,
                                               "d_var",
                                               stan::model::index_uni(i))));
                          } else {
                            current_statement__ = 39;
                            if ((stan::math::primitive_value(
                                   stan::math::logical_eq(
                                     stan::model::rvalue(
                                       stan::model::rvalue(group, "group",
                                         stan::model::index_uni(i)),
                                       "group[i]", stan::model::index_uni(1)),
                                     3))
                                &&
                                stan::math::primitive_value(
                                  stan::math::logical_eq(
                                    stan::model::rvalue(
                                      stan::model::rvalue(group, "group",
                                        stan::model::index_uni(i)),
                                      "group[i]", stan::model::index_uni(2)),
                                    3)))) {
                              current_statement__ = 37;
                              lp_accum__.add(stan::math::normal_lpdf<false>(
                                               stan::model::rvalue(d_mean,
                                                 "d_mean",
                                                 stan::model::index_uni(i)),
                                               W_44,
                                               stan::model::rvalue(d_var,
                                                 "d_var",
                                                 stan::model::index_uni(i))));
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "snp_alone_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> N =
        Eigen::Matrix<double,-1,1>::Constant(5,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      N = in__.template read_constrain_lub<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(1, 100000,
            lp__, 5);
      double fraction = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      fraction = in__.template read_constrain_lub<local_scalar_t__,
                   jacobian__>(0, 1, lp__);
      double T2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      T2 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(1,
             ancestral_T, lp__);
      double T1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      T1 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(1,
             T2, lp__);
      double c1 = std::numeric_limits<double>::quiet_NaN();
      double c2 = std::numeric_limits<double>::quiet_NaN();
      double c3 = std::numeric_limits<double>::quiet_NaN();
      double c4 = std::numeric_limits<double>::quiet_NaN();
      double c5 = std::numeric_limits<double>::quiet_NaN();
      double c6 = std::numeric_limits<double>::quiet_NaN();
      double c7 = std::numeric_limits<double>::quiet_NaN();
      double a_11 = std::numeric_limits<double>::quiet_NaN();
      double a_12 = std::numeric_limits<double>::quiet_NaN();
      double a_13 = std::numeric_limits<double>::quiet_NaN();
      double a_14 = std::numeric_limits<double>::quiet_NaN();
      double a_22 = std::numeric_limits<double>::quiet_NaN();
      double a_23 = std::numeric_limits<double>::quiet_NaN();
      double a_24 = std::numeric_limits<double>::quiet_NaN();
      double a_33 = std::numeric_limits<double>::quiet_NaN();
      double a_34 = std::numeric_limits<double>::quiet_NaN();
      double a_44 = std::numeric_limits<double>::quiet_NaN();
      double W_11 = std::numeric_limits<double>::quiet_NaN();
      double W_12 = std::numeric_limits<double>::quiet_NaN();
      double W_13 = std::numeric_limits<double>::quiet_NaN();
      double W_14 = std::numeric_limits<double>::quiet_NaN();
      double W_22 = std::numeric_limits<double>::quiet_NaN();
      double W_23 = std::numeric_limits<double>::quiet_NaN();
      double W_24 = std::numeric_limits<double>::quiet_NaN();
      double W_33 = std::numeric_limits<double>::quiet_NaN();
      double W_34 = std::numeric_limits<double>::quiet_NaN();
      double W_44 = std::numeric_limits<double>::quiet_NaN();
      out__.write(N);
      out__.write(fraction);
      out__.write(T2);
      out__.write(T1);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 5;
      c1 = (T1 / stan::model::rvalue(N, "N", stan::model::index_uni(1)));
      current_statement__ = 6;
      c2 = ((T2 - T1) /
        stan::model::rvalue(N, "N", stan::model::index_uni(1)));
      current_statement__ = 7;
      c3 = (T1 / stan::model::rvalue(N, "N", stan::model::index_uni(3)));
      current_statement__ = 8;
      c4 = ((T2 - T1) /
        stan::model::rvalue(N, "N", stan::model::index_uni(3)));
      current_statement__ = 9;
      c5 = ((ancestral_T - T2) /
        stan::model::rvalue(N, "N", stan::model::index_uni(4)));
      current_statement__ = 10;
      c6 = (ancestral_T /
        stan::model::rvalue(N, "N", stan::model::index_uni(5)));
      current_statement__ = 11;
      c7 = (T1 / stan::model::rvalue(N, "N", stan::model::index_uni(2)));
      current_statement__ = 12;
      a_11 = ((c1 + c2) + c5);
      current_statement__ = 13;
      a_12 = ((fraction * c2) + c5);
      current_statement__ = 14;
      a_13 = c5;
      current_statement__ = 15;
      a_14 = 0;
      current_statement__ = 16;
      a_22 = ((c7 + (stan::math::pow(fraction, 2) * (c2 + c5))) +
        (stan::math::pow((1 - fraction), 2) * (c4 + c5)));
      current_statement__ = 17;
      a_23 = (((1 - fraction) * c4) + c5);
      current_statement__ = 18;
      a_24 = 0;
      current_statement__ = 19;
      a_33 = ((c3 + c4) + c5);
      current_statement__ = 20;
      a_34 = 0;
      current_statement__ = 21;
      a_44 = c6;
      current_statement__ = 22;
      W_11 = ((a_11 - ((2 / N_pop) * (((a_11 + a_12) + a_13) + a_14))) + ((1
        / stan::math::pow(N_pop, 2)) * ((((a_11 + a_22) + a_33) + a_44) + (2
        * (((((a_12 + a_13) + a_14) + a_23) + a_34) + a_24)))));
      current_statement__ = 23;
      W_12 = (((a_12 - ((1 / N_pop) * (((a_11 + a_12) + a_13) + a_14))) - ((1
        / N_pop) * (((a_12 + a_22) + a_23) + a_24))) + ((1 /
        stan::math::pow(N_pop, 2)) * ((((a_11 + a_22) + a_33) + a_44) + (2 *
        (((((a_12 + a_13) + a_14) + a_23) + a_34) + a_24)))));
      current_statement__ = 24;
      W_13 = (((a_13 - ((1 / N_pop) * (((a_11 + a_12) + a_13) + a_14))) - ((1
        / N_pop) * (((a_13 + a_23) + a_33) + a_34))) + ((1 /
        stan::math::pow(N_pop, 2)) * ((((a_11 + a_22) + a_33) + a_44) + (2 *
        (((((a_12 + a_13) + a_14) + a_23) + a_34) + a_24)))));
      current_statement__ = 25;
      W_14 = (((a_14 - ((1 / N_pop) * (((a_11 + a_12) + a_13) + a_14))) - ((1
        / N_pop) * (((a_14 + a_24) + a_34) + a_44))) + ((1 /
        stan::math::pow(N_pop, 2)) * ((((a_11 + a_22) + a_33) + a_44) + (2 *
        (((((a_12 + a_13) + a_14) + a_23) + a_34) + a_24)))));
      current_statement__ = 26;
      W_22 = ((a_22 - ((2 / N_pop) * (((a_12 + a_22) + a_23) + a_24))) + ((1
        / stan::math::pow(N_pop, 2)) * ((((a_11 + a_22) + a_33) + a_44) + (2
        * (((((a_12 + a_13) + a_14) + a_23) + a_34) + a_24)))));
      current_statement__ = 27;
      W_23 = (((a_23 - ((1 / N_pop) * (((a_12 + a_22) + a_23) + a_24))) - ((1
        / N_pop) * (((a_13 + a_23) + a_33) + a_34))) + ((1 /
        stan::math::pow(N_pop, 2)) * ((((a_11 + a_22) + a_33) + a_44) + (2 *
        (((((a_12 + a_13) + a_14) + a_23) + a_34) + a_24)))));
      current_statement__ = 28;
      W_24 = (((a_24 - ((1 / N_pop) * (((a_12 + a_22) + a_23) + a_24))) - ((1
        / N_pop) * (((a_14 + a_24) + a_34) + a_44))) + ((1 /
        stan::math::pow(N_pop, 2)) * ((((a_11 + a_22) + a_33) + a_44) + (2 *
        (((((a_12 + a_13) + a_14) + a_23) + a_34) + a_24)))));
      current_statement__ = 29;
      W_33 = ((a_33 - ((2 / N_pop) * (((a_13 + a_23) + a_33) + a_34))) + ((1
        / stan::math::pow(N_pop, 2)) * ((((a_11 + a_22) + a_33) + a_44) + (2
        * (((((a_12 + a_13) + a_14) + a_23) + a_34) + a_24)))));
      current_statement__ = 30;
      W_34 = (((a_34 - ((1 / N_pop) * (((a_13 + a_23) + a_33) + a_34))) - ((1
        / N_pop) * (((a_14 + a_24) + a_34) + a_44))) + ((1 /
        stan::math::pow(N_pop, 2)) * ((((a_11 + a_22) + a_33) + a_44) + (2 *
        (((((a_12 + a_13) + a_14) + a_23) + a_34) + a_24)))));
      current_statement__ = 31;
      W_44 = ((a_44 - ((2 / N_pop) * (((a_14 + a_24) + a_34) + a_44))) + ((1
        / stan::math::pow(N_pop, 2)) * ((((a_11 + a_22) + a_33) + a_44) + (2
        * (((((a_12 + a_13) + a_14) + a_23) + a_34) + a_24)))));
      if (emit_transformed_parameters__) {
        out__.write(c1);
        out__.write(c2);
        out__.write(c3);
        out__.write(c4);
        out__.write(c5);
        out__.write(c6);
        out__.write(c7);
        out__.write(a_11);
        out__.write(a_12);
        out__.write(a_13);
        out__.write(a_14);
        out__.write(a_22);
        out__.write(a_23);
        out__.write(a_24);
        out__.write(a_33);
        out__.write(a_34);
        out__.write(a_44);
        out__.write(W_11);
        out__.write(W_12);
        out__.write(W_13);
        out__.write(W_14);
        out__.write(W_22);
        out__.write(W_23);
        out__.write(W_24);
        out__.write(W_33);
        out__.write(W_34);
        out__.write(W_44);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> N =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(5, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(N,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(5),
        "assigning variable N");
      out__.write_free_lub(1, 100000, N);
      local_scalar_t__ fraction = DUMMY_VAR__;
      current_statement__ = 2;
      fraction = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, fraction);
      local_scalar_t__ T2 = DUMMY_VAR__;
      current_statement__ = 3;
      T2 = in__.read<local_scalar_t__>();
      out__.write_free_lub(1, ancestral_T, T2);
      local_scalar_t__ T1 = DUMMY_VAR__;
      current_statement__ = 4;
      T1 = in__.read<local_scalar_t__>();
      out__.write_free_lub(1, T2, T1);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "N", "double",
        std::vector<size_t>{static_cast<size_t>(5)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "fraction",
        "double", std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "T2", "double",
        std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "T1", "double",
        std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> N =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(5, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> N_flat__;
        current_statement__ = 1;
        N_flat__ = context__.vals_r("N");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
          stan::model::assign(N, N_flat__[(pos__ - 1)],
            "assigning variable N", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(1, 100000, N);
      local_scalar_t__ fraction = DUMMY_VAR__;
      current_statement__ = 2;
      fraction = context__.vals_r("fraction")[(1 - 1)];
      out__.write_free_lub(0, 1, fraction);
      local_scalar_t__ T2 = DUMMY_VAR__;
      current_statement__ = 3;
      T2 = context__.vals_r("T2")[(1 - 1)];
      out__.write_free_lub(1, ancestral_T, T2);
      local_scalar_t__ T1 = DUMMY_VAR__;
      current_statement__ = 4;
      T1 = context__.vals_r("T1")[(1 - 1)];
      out__.write_free_lub(1, T2, T1);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"N", "fraction", "T2", "T1"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"c1", "c2", "c3", "c4", "c5", "c6", "c7", "a_11", "a_12",
             "a_13", "a_14", "a_22", "a_23", "a_24", "a_33", "a_34", "a_44",
             "W_11", "W_12", "W_13", "W_14", "W_22", "W_23", "W_24", "W_33",
             "W_34", "W_44"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(5)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
      param_names__.emplace_back(std::string() + "N" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "fraction");
    param_names__.emplace_back(std::string() + "T2");
    param_names__.emplace_back(std::string() + "T1");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "c1");
      param_names__.emplace_back(std::string() + "c2");
      param_names__.emplace_back(std::string() + "c3");
      param_names__.emplace_back(std::string() + "c4");
      param_names__.emplace_back(std::string() + "c5");
      param_names__.emplace_back(std::string() + "c6");
      param_names__.emplace_back(std::string() + "c7");
      param_names__.emplace_back(std::string() + "a_11");
      param_names__.emplace_back(std::string() + "a_12");
      param_names__.emplace_back(std::string() + "a_13");
      param_names__.emplace_back(std::string() + "a_14");
      param_names__.emplace_back(std::string() + "a_22");
      param_names__.emplace_back(std::string() + "a_23");
      param_names__.emplace_back(std::string() + "a_24");
      param_names__.emplace_back(std::string() + "a_33");
      param_names__.emplace_back(std::string() + "a_34");
      param_names__.emplace_back(std::string() + "a_44");
      param_names__.emplace_back(std::string() + "W_11");
      param_names__.emplace_back(std::string() + "W_12");
      param_names__.emplace_back(std::string() + "W_13");
      param_names__.emplace_back(std::string() + "W_14");
      param_names__.emplace_back(std::string() + "W_22");
      param_names__.emplace_back(std::string() + "W_23");
      param_names__.emplace_back(std::string() + "W_24");
      param_names__.emplace_back(std::string() + "W_33");
      param_names__.emplace_back(std::string() + "W_34");
      param_names__.emplace_back(std::string() + "W_44");
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
      param_names__.emplace_back(std::string() + "N" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "fraction");
    param_names__.emplace_back(std::string() + "T2");
    param_names__.emplace_back(std::string() + "T1");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "c1");
      param_names__.emplace_back(std::string() + "c2");
      param_names__.emplace_back(std::string() + "c3");
      param_names__.emplace_back(std::string() + "c4");
      param_names__.emplace_back(std::string() + "c5");
      param_names__.emplace_back(std::string() + "c6");
      param_names__.emplace_back(std::string() + "c7");
      param_names__.emplace_back(std::string() + "a_11");
      param_names__.emplace_back(std::string() + "a_12");
      param_names__.emplace_back(std::string() + "a_13");
      param_names__.emplace_back(std::string() + "a_14");
      param_names__.emplace_back(std::string() + "a_22");
      param_names__.emplace_back(std::string() + "a_23");
      param_names__.emplace_back(std::string() + "a_24");
      param_names__.emplace_back(std::string() + "a_33");
      param_names__.emplace_back(std::string() + "a_34");
      param_names__.emplace_back(std::string() + "a_44");
      param_names__.emplace_back(std::string() + "W_11");
      param_names__.emplace_back(std::string() + "W_12");
      param_names__.emplace_back(std::string() + "W_13");
      param_names__.emplace_back(std::string() + "W_14");
      param_names__.emplace_back(std::string() + "W_22");
      param_names__.emplace_back(std::string() + "W_23");
      param_names__.emplace_back(std::string() + "W_24");
      param_names__.emplace_back(std::string() + "W_33");
      param_names__.emplace_back(std::string() + "W_34");
      param_names__.emplace_back(std::string() + "W_44");
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"N\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(5) + "},\"block\":\"parameters\"},{\"name\":\"fraction\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"T2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"T1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"c1\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"c2\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"c3\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"c4\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"c5\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"c6\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"c7\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"a_11\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"a_12\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"a_13\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"a_14\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"a_22\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"a_23\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"a_24\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"a_33\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"a_34\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"a_44\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"W_11\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"W_12\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"W_13\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"W_14\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"W_22\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"W_23\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"W_24\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"W_33\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"W_34\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"W_44\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"N\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(5) + "},\"block\":\"parameters\"},{\"name\":\"fraction\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"T2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"T1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"c1\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"c2\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"c3\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"c4\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"c5\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"c6\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"c7\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"a_11\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"a_12\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"a_13\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"a_14\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"a_22\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"a_23\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"a_24\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"a_33\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"a_34\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"a_44\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"W_11\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"W_12\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"W_13\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"W_14\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"W_22\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"W_23\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"W_24\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"W_33\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"W_34\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"W_44\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((5 + 1) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters *
      (((((((((((((((((((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) +
      1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) +
      1) + 1) + 1) + 1));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((5 + 1) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters *
      (((((((((((((((((((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) +
      1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) +
      1) + 1) + 1) + 1));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = snp_alone_model_namespace::snp_alone_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return snp_alone_model_namespace::profiles__;
}
#endif